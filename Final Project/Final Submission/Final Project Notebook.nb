(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    264132,       5844]
NotebookOptionsPosition[    246701,       5603]
NotebookOutlinePosition[    247515,       5630]
CellTagsIndexPosition[    247472,       5627]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Time Series Summarization", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
  3.770055604008165*^9, 3.7700556066618843`*^9}, {3.771687133207494*^9, 
  3.7716871364986925`*^9}, {3.7717091428987074`*^9, 
  3.771709144233595*^9}},ExpressionUUID->"49ab34ee-bfd5-49f5-beef-\
400d3cc456dd"],

Cell["Yun-chi Tang", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.771689158823309*^9, 
  3.7716891633973475`*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell["Mentor: Dariia Porechna", "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.7716891671788635`*^9, 
  3.7716891918753014`*^9}},ExpressionUUID->"b70c649b-a958-4202-9f22-\
238ea1f9c7d4"],

Cell[BoxData[
 RowBox[{"Github", ":", " ", 
  ButtonBox[
   RowBox[{
    RowBox[{"https", ":"}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"github", ".", "com"}], "/", "altan4377"}], "/", "WSS"}], "-", 
     "2019"}]}],
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["https://github.com/altan4377/WSS-2019"], None},
   ButtonNote->"https://github.com/altan4377/WSS-2019"]}]], "Text",
 CellChangeTimes->{{3.7717093211480894`*^9, 
  3.771709360516292*^9}},ExpressionUUID->"cd5b32cf-ca2f-44f1-b3d4-\
db2fecafad81"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.771706730661029*^9, 
  3.7717067325532885`*^9}},ExpressionUUID->"0a8d13b1-2fdc-4228-af89-\
732f88f52099"],

Cell[TextData[{
 StyleBox["Abstract", "Subsection"],
 "\nGiven a time series, find out the most efficient way to partition the \
time series into year, months, weeks, dates, etc. for faster calculations of \
maximum, minimum, and mean across the series. \n",
 StyleBox["Description", "Subsection"],
 "\nSuppose one wants to know the average temperature throughout a time \
series. With the existing resources, the only option is to calculate the \
average of every single data point for the entire time interval. This option, \
however, is extremely inefficient as every point is needed in order to \
generate the average. To solve this problem, we examine how we may divide the \
time series into years, months, weeks, dates, and hours so that when the \
average is calculated, we can simply extract the temperature values for the \
years, months, etc. and reduce the number of objects that is needed for the \
average to be calculated. \nI will start by extracting the complete years \
that occur during this time series. By doing so, we created objects that will \
represent all the data points for that year. We may then continue this \
process and extract the complete months from the time that does not assemble \
a complete year. Then, we continue this process by grouping the dates that \
are left into combinations of six-day weeks and days. "
}], "Text",
 CellChangeTimes->{
  3.771706767355324*^9, {3.771708617140211*^9, 3.771708632608509*^9}, 
   3.7717088183371077`*^9, {3.771712041335206*^9, 
   3.7717120432474813`*^9}},ExpressionUUID->"085ed706-12d6-49b3-89ae-\
0ccfe1987286"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Time Series", "Section",
 CellChangeTimes->{{3.7716896889304056`*^9, 
  3.7716896911218657`*^9}},ExpressionUUID->"b2b17e88-1ea9-499f-b00b-\
1729ae20ee8d"],

Cell["\<\
In this section I am going to construct the most optimal way to express a \
time series as a combination of complete years, months, weeks, dates, and \
hours.\
\>", "Text",
 CellChangeTimes->{{3.7717068521572933`*^9, 
  3.7717068968770885`*^9}},ExpressionUUID->"2935245e-80db-461f-b225-\
75065ef14964"],

Cell[CellGroupData[{

Cell["Set Up", "Subsection",
 CellChangeTimes->{{3.7716915775034914`*^9, 3.771691587836368*^9}, {
  3.7716916659433584`*^9, 
  3.771691668469036*^9}},ExpressionUUID->"3a1fa359-9de6-481f-8c4a-\
926a69603249"],

Cell["Find the year, month, date, and hour of the date object", "Text",
 CellChangeTimes->{{3.771691672329609*^9, 
  3.7716916801868362`*^9}},ExpressionUUID->"cc6c82db-b7e1-4af2-8ac0-\
c448cf5eb13a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findYear", "[", "date_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"DateList", "[", "date", "]"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7708971722044277`*^9, 3.7708972059581547`*^9}, {
  3.770897272202005*^9, 3.770897325308172*^9}, {3.7708979071226454`*^9, 
  3.7708979075036163`*^9}, {3.770898428306585*^9, 3.770898429041437*^9}, {
  3.7714465437060843`*^9, 3.7714465453131547`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"d99a72f0-3d6c-4ef9-8ba7-a072ea9c9c8d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findMonth", "[", "date_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"DateList", "[", "date", "]"}], ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7710026044526277`*^9, 3.771002614340102*^9}, {
  3.771087259438278*^9, 3.7710872617708244`*^9}, {3.7716206161468396`*^9, 
  3.77162061816018*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"1db6d682-d53f-4960-82f3-0ee1f11f1791"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findDate", "[", "date_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"DateList", "[", "date", "]"}], ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7710026097388673`*^9, 3.771002621703045*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"b52e406d-b2c3-49f4-8e60-5a1d09c8a0bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findHour", "[", "date_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"DateList", "[", "date", "]"}], ",", "4"}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"b188c344-d6e8-4825-bd9b-d8c40e96d143"],

Cell["\<\
The \[OpenCurlyDoubleQuote]startDate\[CloseCurlyDoubleQuote] and the \
\[OpenCurlyDoubleQuote]endDate\[CloseCurlyDoubleQuote] generates the dates \
that the day-week-month-year optimization should begin based on if the \
first/last date is complete. Note that the examination of whether the \
first/last part is complete is a recurring theme throughout the set up and \
will be used every time to ensure complete objects are treated as complete \
objects instead of the sum of its parts. \
\>", "Text",
 CellChangeTimes->{{3.7716927793279877`*^9, 3.7716928418696156`*^9}, {
  3.771709840322824*^9, 
  3.7717099051809964`*^9}},ExpressionUUID->"f8b779bc-eb18-494e-8acf-\
306c72b85987"],

Cell[BoxData[
 RowBox[{
  RowBox[{"startDate", "[", "start_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "start", "]"}], " ", "\[Equal]", " ", "0"}], 
    ",", " ", "start", ",", " ", 
    RowBox[{"start", " ", "+", 
     RowBox[{"Quantity", "[", 
      RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716236566897964`*^9, 3.7716236741624255`*^9}, {
  3.7716237701262865`*^9, 3.771623786963497*^9}, {3.7716238408753777`*^9, 
  3.771623842266303*^9}, {3.7716239232813125`*^9, 3.771623928641881*^9}, {
  3.771691710848237*^9, 3.7716917200163383`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"684fb160-7e1e-46f2-97f0-af6737f974b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"endDate", "[", "end_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "end", "]"}], " ", "\[Equal]", " ", "23"}], ",",
     " ", "end", ",", " ", 
    RowBox[{"end", " ", "-", " ", 
     RowBox[{"Quantity", "[", 
      RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716238441535606`*^9, 3.7716238691231766`*^9}, {
   3.771623930618193*^9, 3.771623935557482*^9}, 3.7716917264926586`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"1fb289b4-a6b2-4517-9a1b-52136c6efb23"],

Cell["\<\
A couple of set up functions: The first one deals with setting the number of \
days in the month. The next two deals with converting date object to string \
form (and we are going to let it be a listable function).\
\>", "Text",
 CellChangeTimes->{{3.7716928551024175`*^9, 3.7716928662478347`*^9}, {
  3.7716929119992833`*^9, 
  3.771692957823781*^9}},ExpressionUUID->"35e63966-b8d8-40ee-aba7-\
fc349ff48e77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"daysInMonth", "[", "date_DateObject", "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"findYear", "[", "date", "]"}], ",", "4"}], "]"}], " ", 
     "\[Equal]", " ", "0"}], ",", " ", 
    RowBox[{"Part", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "31", ",", "29", ",", "31", ",", "30", ",", "31", ",", "30", ",", "31",
         ",", "31", ",", "30", ",", "31", ",", "30", ",", "31"}], "}"}], ",", 
      RowBox[{"findMonth", "[", "date", "]"}]}], "]"}], ",", 
    RowBox[{"Part", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "31", ",", "28", ",", "31", ",", "30", ",", "31", ",", "30", ",", "31",
         ",", "31", ",", "30", ",", "31", ",", "30", ",", "31"}], "}"}], ",", 
      RowBox[{"findMonth", "[", "date", "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7710199133263907`*^9, 3.7710199923170967`*^9}, {
  3.7710208773586683`*^9, 3.7710209057605224`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d145da8e-d23b-4679-b129-bb42b455c966"],

Cell[BoxData[
 RowBox[{
  RowBox[{"convertDateToString", "[", "date_DateObject", "]"}], " ", ":=", 
  " ", 
  RowBox[{"IntegerString", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"10000", " ", "*", " ", 
      RowBox[{"findYear", "[", "date", "]"}]}], " ", "+", " ", 
     RowBox[{"100", " ", "*", " ", 
      RowBox[{"findMonth", "[", "date", "]"}]}], " ", "+", " ", 
     RowBox[{"findDate", "[", "date", "]"}]}], ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713582303041115`*^9, 3.771358263291465*^9}, {
  3.7713583857993174`*^9, 3.7713583947794285`*^9}, {3.771358454352132*^9, 
  3.7713584568978167`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"57634e95-2805-421f-90a9-2c902a49a192"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"convertDateToString", ",", "Listable"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714132003672705`*^9, 3.771413236500318*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"91971021-1359-44f6-8dea-742b356a53a8"],

Cell["\<\
Now we write the code to find the year, month, and date parts. 
First, years: \
\>", "Text",
 CellChangeTimes->{{3.7716929855062094`*^9, 
  3.77169303610688*^9}},ExpressionUUID->"d63ce7bc-2606-4bd9-ab7f-\
d9751f0a0522"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCompleteYearsBetween", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"ToString", " ", "/@", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{"m", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", 
          RowBox[{"findYear", "[", " ", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
          RowBox[{"findYear", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "}"}]}], "]"}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"findYear", "[", " ", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], "*", "10000"}], 
         "+", 
         RowBox[{
          RowBox[{"findMonth", "[", " ", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], "*", "100"}], "+", 
         RowBox[{"findDate", "[", " ", 
          RowBox[{"startDate", "[", "start", "]"}], "]"}]}], "\[LessEqual]", 
        " ", 
        RowBox[{
         RowBox[{"#", "*", "10000"}], "+", "101"}]}], " ", "&&", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "*", "10000"}], "+", "1200", "+", 
         RowBox[{"daysInMonth", "[", 
          RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "\[LessEqual]", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"findYear", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}], "*", "10000"}], "+", 
         RowBox[{
          RowBox[{"findMonth", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}], "*", "100"}], "+", 
         RowBox[{"findDate", "[", 
          RowBox[{"endDate", "[", "end", "]"}], "]"}]}]}]}], "&"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714305641713915`*^9, 3.7714306291676474`*^9}, {
  3.7716260936416435`*^9, 3.77162610917198*^9}, {3.771626190090835*^9, 
  3.771626202084818*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"82b1bc84-fdd1-4fa0-bda6-5f6fd0faecc7"],

Cell["\<\
Then: months (for before a full year, after a full year, and between two days \
if the two dates do not cover the entire year: \
\>", "Text",
 CellChangeTimes->{{3.771693359150627*^9, 
  3.7716934206025333`*^9}},ExpressionUUID->"266a24ab-fb15-44c0-87ef-\
155f0231775c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findMonthsAfter", "[", "start_DateObject", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"findMonth", "[", "start", "]"}], " ", "\[Equal]", " ", "1"}], 
     " ", "&&", " ", 
     RowBox[{
      RowBox[{"findDate", "[", "start", "]"}], " ", "\[Equal]", " ", "1"}], 
     " ", "&&", " ", 
     RowBox[{
      RowBox[{"findHour", "[", "start", "]"}], " ", "\[Equal]", " ", "0"}]}], 
    ",", " ", 
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"findDate", "[", 
        RowBox[{"startDate", "[", "start", "]"}], "]"}], " ", "\[Equal]", " ",
        "1"}], ",", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{
             RowBox[{"findYear", "[", 
              RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", "10", ",",
              "4"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
        " ", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{"findMonth", "[", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", "12"}], 
         "}"}]}], "]"}], ",", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{
             RowBox[{"findYear", "[", 
              RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", "10", ",",
              "4"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
        " ", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{
           RowBox[{"findMonth", "[", 
            RowBox[{"startDate", "[", "start", "]"}], "]"}], "+", "1"}], ",", 
          "12"}], "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771185879727334*^9, 3.771185987131278*^9}, {
  3.77118602524175*^9, 3.771186053510418*^9}, {3.7711860846255617`*^9, 
  3.7711860872819448`*^9}, {3.7711861519585457`*^9, 3.7711862061203876`*^9}, {
  3.771425090892067*^9, 3.771425106053714*^9}, {3.7714285036525283`*^9, 
  3.7714285074100227`*^9}, {3.7716240681967554`*^9, 3.7716240817817974`*^9}, {
  3.7716269589903126`*^9, 3.7716270028234863`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"09bfdc6f-003d-4ac9-8055-9fed2a771dca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCompleteMonthsBetween", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ", 
  RowBox[{"ToString", " ", "/@", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"100", "*", "m"}], "+", "n"}], ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", 
          RowBox[{"findYear", "[", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
          RowBox[{"findYear", "[", "end", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", "12"}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"findYear", "[", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], "*", "10000"}], 
         "+", 
         RowBox[{
          RowBox[{"findMonth", "[", 
           RowBox[{"startDate", "[", "start", "]"}], "]"}], "*", "100"}], "+", 
         RowBox[{"findDate", "[", 
          RowBox[{"startDate", "[", "start", "]"}], "]"}]}], "\[LessEqual]", 
        " ", 
        RowBox[{
         RowBox[{"#", "*", "100"}], "+", "1"}]}], " ", "&&", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "*", "100"}], "+", 
         RowBox[{"daysInMonth", "[", 
          RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "\[LessEqual]", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"findYear", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}], "*", "10000"}], "+", 
         RowBox[{
          RowBox[{"findMonth", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}], "*", "100"}], "+", 
         RowBox[{"findDate", "[", 
          RowBox[{"endDate", "[", "end", "]"}], "]"}]}]}]}], "&"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714153700397186`*^9, 3.7714154151424646`*^9}, {
  3.7714160848563566`*^9, 3.7714161248639903`*^9}, {3.771416205740545*^9, 
  3.771416263306857*^9}, {3.771416297010285*^9, 3.771416423475453*^9}, {
  3.7714165671820903`*^9, 3.7714165838441753`*^9}, {3.771427433636839*^9, 
  3.771427601533584*^9}, {3.7714276627933536`*^9, 3.771427715919712*^9}, {
  3.7714277559233336`*^9, 3.771427757608457*^9}, {3.771427846204423*^9, 
  3.771427849206416*^9}, {3.7714284577602777`*^9, 3.7714284590521407`*^9}, {
  3.771428545378297*^9, 3.771428548673497*^9}, {3.771428672232047*^9, 
  3.7714286733077607`*^9}, {3.7714288238477507`*^9, 3.771428826647606*^9}, {
  3.771626311919916*^9, 3.7716263266216927`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"6fa65467-c853-494a-9b4e-dc574345e016"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findMonthsBefore", "[", "end_DateObject", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"findMonth", "[", "end", "]"}], " ", "\[Equal]", " ", "12"}], 
     " ", "&&", " ", 
     RowBox[{
      RowBox[{"findDate", "[", "end", "]"}], " ", "\[Equal]", " ", "31"}], 
     " ", "&&", " ", 
     RowBox[{
      RowBox[{"findHour", "[", "end", "]"}], " ", "\[Equal]", " ", "23"}]}], 
    ",", " ", 
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"findDate", "[", 
        RowBox[{"endDate", "[", "end", "]"}], "]"}], " ", "\[Equal]", " ", 
       RowBox[{"daysInMonth", "[", 
        RowBox[{"endDate", "[", "end", "]"}], "]"}]}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{
             RowBox[{"findYear", "[", 
              RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", "10", ",", 
             "4"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
        " ", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"findMonth", "[", 
           RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{
             RowBox[{"findYear", "[", 
              RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", "10", ",", 
             "4"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
        " ", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{
           RowBox[{"findMonth", "[", 
            RowBox[{"endDate", "[", "end", "]"}], "]"}], "-", "1"}]}], 
         "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771186060767874*^9, 3.7711861409337564`*^9}, {
   3.771186510017242*^9, 3.7711865316968317`*^9}, {3.771186712441865*^9, 
   3.7711867194406643`*^9}, {3.771424648189659*^9, 3.7714248438573694`*^9}, {
   3.7714248740633345`*^9, 3.771425065089137*^9}, {3.7714284966318493`*^9, 
   3.771428499748929*^9}, {3.77162391368192*^9, 3.7716239207616363`*^9}, {
   3.771624048823865*^9, 3.7716240570653505`*^9}, 3.7716267283410482`*^9, {
   3.7716268445714073`*^9, 3.7716268852334642`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"dea01548-4e25-44b7-b76b-f136b77155dc"],

Cell["\<\
Weeks and Dates. 
Throughout this process, I make a decision to group the dates into six-day \
weeks into the traditional seven-day format for two reasons: 
1) This will overall allow the spare parts to be more efficiently grouped as \
the possible number of days in months (28, 29, 30, 31), especially the latter \
two which will be used extremely often, will have a significantly smaller \
remainder when divided by 6 compared to when they are divided by 7. 
2) This will eliminate any potential for the need to reconsider the \
optimization strategy for the beginning and the ending of the time series: If \
the traditional seven-day week format is used, then the optimizing strategy \
will take one extra step because if we consider the time series [June 1st, \
July 5th], then grouping this time series into 5 weeks instead of the month \
of June plus 5 days will mean that less objects is needed when we calculate \
the average. Using the six-day week format will eliminate such concerns. Once \
we extracted the weeks and dates, we will create the most efficient \
combination for this time series.\
\>", "Text",
 CellChangeTimes->{{3.771693452456725*^9, 3.7716934599317007`*^9}, {
  3.771708824864458*^9, 
  3.7717088310405693`*^9}},ExpressionUUID->"d46fe1de-04f8-473b-b2e3-\
1a217cdcb866"],

Cell[BoxData[
 RowBox[{
  RowBox[{"listWeekDatesBegin", "[", "dateStart_DateObject", "]"}], " ", ":=",
   " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "dateStart", "]"}], "\[Equal]", " ", "0"}], ",", 
    RowBox[{"(", 
     RowBox[{"ToString", "/@", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"findDate", "[", "dateStart", "]"}], "\[Equal]", " ", "1"}], 
        ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"n", ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateStart", "]"}], "*", "10000"}],
                  "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateStart", "]"}], "*", "100"}], 
                 "+", 
                 RowBox[{"findDate", "[", "dateStart", "]"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateStart", "]"}], "*", "10000"}],
                  "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateStart", "]"}], "*", "100"}], 
                 "+", 
                 RowBox[{"daysInMonth", "[", "dateStart", "]"}]}]}], "}"}]}], 
             "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateStart", "]"}], "*", "10000"}],
                  "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateStart", "]"}], "*", "100"}], 
                 "+", 
                 RowBox[{"findDate", "[", "dateStart", "]"}]}], ")"}]}], "<", 
              "  ", 
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"daysInMonth", "[", "dateStart", "]"}], "-", 
                 RowBox[{"findDate", "[", "dateStart", "]"}], "+", "1"}], ",",
                 "6"}], "]"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"Reverse", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"IntegerString", "[", 
                 RowBox[{
                  RowBox[{"findYear", "[", "dateStart", "]"}], ",", "10", ",",
                   "4"}], "]"}], ",", 
                RowBox[{"IntegerString", "[", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateStart", "]"}], ",", "10", 
                  ",", "2"}], "]"}], ",", 
                RowBox[{"IntegerString", "[", 
                 RowBox[{"n", ",", "10", ",", "2"}], "]"}], ",", 
                "\"\<W\>\""}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"n", ",", 
               RowBox[{
                RowBox[{"daysInMonth", "[", "dateStart", "]"}], "-", "5"}], 
               ",", 
               RowBox[{"findDate", "[", "dateStart", "]"}], ",", 
               RowBox[{"-", "6"}]}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
       "]"}]}], ")"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"ToString", "/@", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"findDate", "[", 
          RowBox[{"dateStart", "+", " ", 
           RowBox[{"Quantity", "[", 
            RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "\[Equal]", 
         " ", "1"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"n", ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"dateStart", "+", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateStart", "+", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", 
                 RowBox[{"daysInMonth", "[", 
                  RowBox[{"dateStart", "+", " ", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}]}], 
               "}"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateStart", "+", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"dateStart", "+", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}], 
                ")"}]}], "<", "  ", 
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"daysInMonth", "[", 
                  RowBox[{"dateStart", "+", " ", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "-", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"dateStart", "+", " ", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "+", 
                 "1"}], ",", "6"}], "]"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"Reverse", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"IntegerString", "[", 
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
                  "10", ",", "4"}], "]"}], ",", 
                RowBox[{"IntegerString", "[", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateStart", "+", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
                  "10", ",", "2"}], "]"}], ",", 
                RowBox[{"IntegerString", "[", 
                 RowBox[{"n", ",", "10", ",", "2"}], "]"}], ",", 
                "\"\<W\>\""}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"n", ",", 
               RowBox[{
                RowBox[{"daysInMonth", "[", 
                 RowBox[{"dateStart", "+", " ", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "-", 
                "5"}], ",", 
               RowBox[{"findDate", "[", 
                RowBox[{"dateStart", "+", " ", 
                 RowBox[{"Quantity", "[", 
                  RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
               RowBox[{"-", "6"}]}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
       "]"}]}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771258331767539*^9, 3.771258517076875*^9}, {
  3.7712585591535225`*^9, 3.771258905811407*^9}, {3.771259121774144*^9, 
  3.7712591248211727`*^9}, {3.771259204814319*^9, 3.7712592237168913`*^9}, {
  3.7714278989044933`*^9, 3.771427920638955*^9}, {3.7714279509351134`*^9, 
  3.7714279541832814`*^9}, {3.7714284352458954`*^9, 3.7714284374823885`*^9}, {
  3.7714285251468267`*^9, 3.7714285287692437`*^9}, {3.771428862532494*^9, 
  3.771428865206274*^9}, {3.771430070208943*^9, 3.771430073849373*^9}, {
  3.771430123467394*^9, 3.7714301348137674`*^9}, {3.7716217007576056`*^9, 
  3.7716218231270385`*^9}, {3.771623282783041*^9, 3.771623347676236*^9}, {
  3.7716246401597185`*^9, 3.771624658807128*^9}, {3.7716917435660105`*^9, 
  3.7716917567407846`*^9}, {3.771691896653895*^9, 3.7716919503026085`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"d7be7ffc-6fbe-4cbc-b4fb-33d203b20e3a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"listWeekDatesEnd", "[", "dateEnd_DateObject", "]"}], " ", ":=", 
  " ", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "dateEnd", "]"}], " ", "\[Equal]", " ", "23"}], 
    ",", 
    RowBox[{"(", 
     RowBox[{"ToString", "/@", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"findDate", "[", "dateEnd", "]"}], " ", "\[Equal]", " ", 
         RowBox[{"daysInMonth", "[", "dateEnd", "]"}]}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"StringJoin", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"IntegerString", "[", 
                RowBox[{
                 RowBox[{"findYear", "[", "dateEnd", "]"}], ",", "10", ",", 
                 "4"}], "]"}], ",", 
               RowBox[{"IntegerString", "[", 
                RowBox[{
                 RowBox[{"findMonth", "[", "dateEnd", "]"}], ",", "10", ",", 
                 "2"}], "]"}], ",", 
               RowBox[{"IntegerString", "[", 
                RowBox[{"n", ",", "10", ",", "2"}], "]"}], ",", "\"\<W\>\""}],
               "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "1", ",", 
              RowBox[{
               RowBox[{"findDate", "[", "dateEnd", "]"}], "-", "5"}], ",", 
              "6"}], "}"}]}], "]"}], ",", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"n", ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateEnd", "]"}], "*", "10000"}], 
                 "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateEnd", "]"}], "*", "100"}], 
                 "+", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateEnd", "]"}], "*", "10000"}], 
                 "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateEnd", "]"}], "*", "100"}], 
                 "+", 
                 RowBox[{"findDate", "[", "dateEnd", "]"}]}]}], "}"}]}], 
             "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", "dateEnd", "]"}], "*", "10000"}], 
                 "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", "dateEnd", "]"}], "*", "100"}], 
                 "+", 
                 RowBox[{"findDate", "[", "dateEnd", "]"}]}], ")"}], "-", 
               "#"}], "<", " ", 
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{"findDate", "[", "dateEnd", "]"}], ",", "6"}], 
               "]"}]}], "&"}]}], "]"}]}], "]"}]}], "]"}]}], ")"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"ToString", "/@", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"findDate", "[", 
          RowBox[{"dateEnd", "-", 
           RowBox[{"Quantity", "[", 
            RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], " ", 
         "\[Equal]", " ", 
         RowBox[{"daysInMonth", "[", 
          RowBox[{"dateEnd", "-", 
           RowBox[{"Quantity", "[", 
            RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"StringJoin", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"IntegerString", "[", 
                RowBox[{
                 RowBox[{"findYear", "[", 
                  RowBox[{"dateEnd", "-", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
                 "10", ",", "4"}], "]"}], ",", 
               RowBox[{"IntegerString", "[", 
                RowBox[{
                 RowBox[{"findMonth", "[", 
                  RowBox[{"dateEnd", "-", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
                 "10", ",", "2"}], "]"}], ",", 
               RowBox[{"IntegerString", "[", 
                RowBox[{"n", ",", "10", ",", "2"}], "]"}], ",", "\"\<W\>\""}],
               "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "1", ",", 
              RowBox[{
               RowBox[{"findDate", "[", 
                RowBox[{"dateEnd", "-", 
                 RowBox[{"Quantity", "[", 
                  RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "-", 
               "5"}], ",", "6"}], "}"}]}], "]"}], ",", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"n", ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"dateEnd", "-", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}]}], 
               "}"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"findYear", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "10000"}], "+", 
                 RowBox[{
                  RowBox[{"findMonth", "[", 
                   RowBox[{"dateEnd", "-", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], "*", 
                  "100"}], "+", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"dateEnd", "-", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}]}], 
                ")"}], "-", "#"}], "<", " ", 
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{"findDate", "[", 
                 RowBox[{"dateEnd", "-", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", 
                "6"}], "]"}]}], "&"}]}], "]"}]}], "]"}]}], "]"}]}], ")"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771355483701149*^9, 3.7713555173129606`*^9}, {
  3.7713555517538457`*^9, 3.7713555548226886`*^9}, {3.771355587429807*^9, 
  3.7713558029243956`*^9}, {3.7713558365752916`*^9, 3.7713558595192204`*^9}, {
  3.771357349627802*^9, 3.7713573513571615`*^9}, {3.7714134999286366`*^9, 
  3.7714135023172245`*^9}, {3.771417463882169*^9, 3.7714174661807003`*^9}, {
  3.7714175134561625`*^9, 3.771417525096902*^9}, {3.771427971082528*^9, 
  3.77142797450681*^9}, {3.771428441164834*^9, 3.771428443112136*^9}, {
  3.771428531005726*^9, 3.771428536142149*^9}, {3.7714288681292186`*^9, 
  3.771428870114543*^9}, {3.771620745928213*^9, 3.7716207864521823`*^9}, {
  3.771621980760953*^9, 3.771622017914683*^9}, {3.7716222439292545`*^9, 
  3.771622277978915*^9}, {3.771623484494352*^9, 3.771623556345169*^9}, {
  3.7716244967803645`*^9, 3.771624519206292*^9}, {3.7716919578386145`*^9, 
  3.771692011636427*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"b2fb96c7-0593-4daf-9c2a-e9ec9fb3ee21"],

Cell["Lastly, Hours:", "Text",
 CellChangeTimes->{{3.771693467361644*^9, 
  3.771693473631826*^9}},ExpressionUUID->"e560ba68-8f3c-4dac-ae24-\
b49aaceff5e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findHourlySetsAfter", "[", "start_DateObject", "]"}], " ", ":=", 
  " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "start", "]"}], " ", "\[Equal]", " ", "0"}], 
    ",", " ", 
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findYear", "[", "start", "]"}], ",", "10", ",", "4"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findMonth", "[", "start", "]"}], ",", "10", ",", "2"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findDate", "[", "start", "]"}], ",", "10", ",", "2"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"findHour", "[", "start", "]"}], ",", "23"}], "}"}]}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771630532894617*^9, 3.771630736433812*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"74cbdc6f-c9c5-42df-a6ec-84dcf88705d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findHourlySetsBefore", "[", "end_DateObject", "]"}], " ", ":=", 
  " ", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"findHour", "[", "end", "]"}], " ", "\[Equal]", " ", "23"}], ",",
     " ", 
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findYear", "[", "end", "]"}], ",", "10", ",", "4"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findMonth", "[", "end", "]"}], ",", "10", ",", "2"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"findDate", "[", "end", "]"}], ",", "10", ",", "2"}], 
          "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{"n", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{"findHour", "[", "end", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7716307763406525`*^9, 3.7716308348445873`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1b0b7a8c-1f71-43ef-8023-10d9a5297ffd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Applying The Set-Up To Generate The Most Optimal Combination. \
\>", "Subsection",
 CellChangeTimes->{{3.771693542399584*^9, 3.771693562201771*^9}, {
  3.7717119512600527`*^9, 
  3.7717119646139407`*^9}},ExpressionUUID->"611db898-6314-4d60-9f16-\
d4d2e11732ac"],

Cell["\<\
Essentially, the mechanism goes as the following: 
- If there are complete years in between, then we take the complete year, and \
then the months, weeks, days, hours (in that order) before and after it. 
- If not: 
\t- First we need to find the combination that involves using all the \
possible whole months
\t- Then we need to find the combination that involves using none of the \
whole months
\t- If the number of complete months between two objects is greater than or \
equal to 2, then apply the combination that involves using all the possible \
months; if the number of complete months between two objects is 0, then apply \
the combination that involves using none of the possible months; if the \
number of complete months is 1 then we compare the two combinations and \
select the one with the lower number of objects. \
\>", "Text",
 CellChangeTimes->{{3.771693565123708*^9, 3.7716935768825336`*^9}, {
  3.7716936769981627`*^9, 
  3.7716939088094406`*^9}},ExpressionUUID->"5c7a6d62-ea72-45d9-bc26-\
082e465abf84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationWithYear", "[", 
   RowBox[{"start_DateObject", ",", " ", "end_DateObject"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"findHourlySetsAfter", "[", "start", "]"}], ",", 
    RowBox[{"listWeekDatesBegin", "[", "start", "]"}], ",", 
    RowBox[{"findMonthsAfter", "[", "start", "]"}], ",", 
    RowBox[{"findCompleteYearsBetween", "[", 
     RowBox[{"start", ",", "end"}], "]"}], ",", 
    RowBox[{"findMonthsBefore", "[", "end", "]"}], ",", 
    RowBox[{"listWeekDatesEnd", "[", "end", "]"}], ",", 
    RowBox[{"findHourlySetsBefore", "[", "end", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771196068771106*^9, 3.7711961130232987`*^9}, {
   3.7711961693107166`*^9, 3.771196213178105*^9}, {3.7711962682369375`*^9, 
   3.771196272269326*^9}, {3.7711964441304817`*^9, 3.771196445536807*^9}, {
   3.7712591487781167`*^9, 3.771259156664364*^9}, {3.7713554351462846`*^9, 
   3.7713554435379267`*^9}, {3.7713558726988955`*^9, 3.771355874072567*^9}, {
   3.7713573809824123`*^9, 3.771357382536276*^9}, {3.7713574213353243`*^9, 
   3.771357422817058*^9}, {3.7714170950386944`*^9, 3.771417097225149*^9}, 
   3.771417563225947*^9, {3.7714270564907913`*^9, 3.771427059472783*^9}, 
   3.7714306728527145`*^9, {3.7716308414849997`*^9, 3.771630855413276*^9}, {
   3.771630886550992*^9, 3.7716308933845434`*^9}, {3.77169329773276*^9, 
   3.771693337515232*^9}, {3.7717031494909177`*^9, 3.7717031495649757`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"2bcd6cea-27c2-42b7-98c2-8ffb4bcb0794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationWithMonth", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ",
   "\[IndentingNewLine]", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"findHourlySetsAfter", "[", "start", "]"}], ",", 
    RowBox[{"listWeekDatesBegin", "[", "start", "]"}], ",", 
    RowBox[{"findCompleteMonthsBetween", "[", 
     RowBox[{"start", ",", "end"}], "]"}], ",", 
    RowBox[{"listWeekDatesEnd", "[", "end", "]"}], ",", 
    RowBox[{"findHourlySetsBefore", "[", "end", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771196634846534*^9, 3.771196650654158*^9}, {
   3.7712592563246007`*^9, 3.771259274306559*^9}, {3.7713571956074905`*^9, 
   3.7713571971525145`*^9}, {3.7713572937038355`*^9, 
   3.7713573431297264`*^9}, {3.771357453257861*^9, 3.77135746597641*^9}, {
   3.771427011132608*^9, 3.771427022374089*^9}, {3.7714277983875947`*^9, 
   3.7714278050190086`*^9}, {3.7714280175654573`*^9, 3.771428028140504*^9}, {
   3.771428123030654*^9, 3.7714281263508635`*^9}, {3.7714288995401235`*^9, 
   3.7714289008469954`*^9}, 3.7716308602825093`*^9, 3.7716308995626516`*^9, {
   3.771703152026613*^9, 3.7717031525889797`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"9a407b30-9be8-4079-96a7-52cef3a448c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationWithoutMonth", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"findHourlySetsAfter", "[", "start", "]"}], ",", 
    RowBox[{"Table", "[", " ", 
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"convertDateToString", "[", "n", "]"}], ",", "\"\<W\>\""}], 
       "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"n", ",", " ", 
        RowBox[{"startDate", "[", "start", "]"}], ",", " ", 
        RowBox[{
         RowBox[{"endDate", "[", "end", "]"}], " ", "-", " ", 
         RowBox[{"Quantity", "[", 
          RowBox[{"5", ",", "\"\<Days\>\""}], "]"}]}], " ", ",", " ", 
        RowBox[{"Quantity", "[", 
         RowBox[{"6", ",", "\"\<Days\>\""}], "]"}]}], "}"}]}], "]"}], ",", 
    " ", 
    RowBox[{"convertDateToString", "/@", "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{"n", ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"findYear", "[", 
               RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
              RowBox[{"findMonth", "[", 
               RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
              RowBox[{"findDate", "[", 
               RowBox[{"startDate", "[", "start", "]"}], "]"}]}], "}"}], 
            "]"}], ",", 
           RowBox[{"endDate", "[", "end", "]"}], ",", 
           RowBox[{"Quantity", "[", 
            RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"findYear", "[", 
                RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", 
               RowBox[{"findMonth", "[", 
                RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", 
               RowBox[{"findDate", "[", 
                RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "}"}], "]"}], 
            "-", "#"}], "]"}], "+", "1"}], " ", "<=", " ", 
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"QuantityMagnitude", "[", 
             RowBox[{
              RowBox[{"DateObject", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"findYear", "[", 
                  RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", 
                 RowBox[{"findMonth", "[", 
                  RowBox[{"endDate", "[", "end", "]"}], "]"}], ",", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"endDate", "[", "end", "]"}], "]"}]}], "}"}], "]"}],
               "-", 
              RowBox[{"DateObject", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"findYear", "[", 
                  RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
                 RowBox[{"findMonth", "[", 
                  RowBox[{"startDate", "[", "start", "]"}], "]"}], ",", 
                 RowBox[{"findDate", "[", 
                  RowBox[{"startDate", "[", "start", "]"}], "]"}]}], "}"}], 
               "]"}]}], "]"}], "+", "1"}], ",", "6"}], "]"}]}], "&"}]}], 
      "]"}]}], ",", 
    RowBox[{"findHourlySetsBefore", "[", "end", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771357476214981*^9, 3.771357491968423*^9}, {
   3.771357743500961*^9, 3.77135777406863*^9}, {3.7713578543656454`*^9, 
   3.771357946424321*^9}, {3.771358023212772*^9, 3.771358228404826*^9}, {
   3.7713582682052245`*^9, 3.771358369097636*^9}, {3.7713584124409432`*^9, 
   3.771358418084566*^9}, {3.7713584920845394`*^9, 3.771358663150919*^9}, {
   3.7713588091800904`*^9, 3.7713588525022645`*^9}, {3.771413131082312*^9, 
   3.771413152854802*^9}, {3.7714132786933904`*^9, 3.7714132935843086`*^9}, {
   3.771625305944123*^9, 3.771625321774666*^9}, {3.7716253699937563`*^9, 
   3.771625399190181*^9}, {3.77162774860991*^9, 3.7716277491942997`*^9}, {
   3.7716279244867086`*^9, 3.7716279973041787`*^9}, {3.771628027901534*^9, 
   3.771628046719063*^9}, {3.771628077215362*^9, 3.7716280881556416`*^9}, {
   3.7716281426559143`*^9, 3.771628147526148*^9}, {3.771628330429879*^9, 
   3.7716283328034625`*^9}, 3.77162972436804*^9, {3.771630876408245*^9, 
   3.771630902996937*^9}, 3.7716920307201276`*^9, {3.7716925662955203`*^9, 
   3.7716925865209804`*^9}, {3.771703154365163*^9, 3.771703154470232*^9}, {
   3.7717049650354643`*^9, 3.771704965312581*^9}, {3.771705212578064*^9, 
   3.771705212761176*^9}, {3.771705549376894*^9, 3.7717055876354604`*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"f9badfbd-bd4c-4f49-b386-e7b93fd170a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationTwoMonthsPlus", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ", 
  RowBox[{"combinationWithMonth", "[", 
   RowBox[{"start", ",", "end"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7714270783403397`*^9, 3.7714271098693233`*^9}, {
  3.7717031577684264`*^9, 3.771703182749052*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"08a5dbd8-e15c-48a0-ab8d-6b1c14345e55"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationOneMth", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ", 
  RowBox[{"First", "[", 
   RowBox[{"SortBy", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"combinationWithMonth", "[", 
        RowBox[{"start", ",", "end"}], "]"}], ",", 
       RowBox[{"CombinationWithoutMonth", "[", 
        RowBox[{"start", ",", "end"}], "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Length", "[", "#", "]"}], "&"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7711964594468307`*^9, 3.7711964701871166`*^9}, {
   3.771196501752899*^9, 3.771196511244867*^9}, {3.771259251905659*^9, 
   3.7712592546274643`*^9}, {3.7714133107597313`*^9, 3.771413338061902*^9}, {
   3.7714133863030076`*^9, 3.771413389100878*^9}, 3.7714302489669847`*^9, {
   3.7714304769887314`*^9, 3.7714304771828613`*^9}, {3.771430788808647*^9, 
   3.7714307931905622`*^9}, {3.771703159789772*^9, 3.7717031978891335`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"951f98f2-b85d-4428-a923-def14bc9495a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"combinationNoMths", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], ":=", " ", 
  RowBox[{"combinationWithoutMonth", "[", 
   RowBox[{"start", ",", "end"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7714135602968054`*^9, 3.7714136003914957`*^9}, {
   3.7714272008043804`*^9, 3.771427201022526*^9}, 3.7714306823630486`*^9, {
   3.7717031617460737`*^9, 3.771703187838439*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"db88a211-e2f7-40de-bf28-fc4fb1f75708"],

Cell["\<\
This function will generate, with all the information and functions at the \
above, the most efficient time series breakdown.\
\>", "Text",
 CellChangeTimes->{{3.771709031102434*^9, 
  3.7717090585046663`*^9}},ExpressionUUID->"fdd13f25-c954-437e-8168-\
c81877c6f3f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TimeSeriesCombination", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ",
   "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"findCompleteYearsBetween", "[", 
       RowBox[{"start", ",", "end"}], "]"}], "]"}], "\[GreaterEqual]", " ", 
     "1"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"combinationWithYear", "[", 
     RowBox[{"start", ",", "end"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"findCompleteMonthsBetween", "[", 
         RowBox[{"start", ",", "end"}], "]"}], "]"}], " ", "\[GreaterEqual]", 
       " ", "2"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{"combinationTwoMonthsPlus", "[", 
       RowBox[{"start", ",", "end"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"findCompleteMonthsBetween", "[", 
           RowBox[{"start", ",", "end"}], "]"}], "]"}], "\[Equal]", " ", 
         "1"}], ",", "\[IndentingNewLine]", 
        RowBox[{"combinationOneMth", "[", 
         RowBox[{"start", ",", "end"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"combinationNoMths", "[", 
         RowBox[{"start", ",", "end"}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771416597215081*^9, 3.7714166313941183`*^9}, 
   3.7714166695074835`*^9, {3.7714168007188168`*^9, 3.771416920067246*^9}, {
   3.771416963967455*^9, 3.7714169661078873`*^9}, 3.771430498171835*^9, {
   3.7714306655298448`*^9, 3.7714308142565765`*^9}, {3.771703165100314*^9, 
   3.771703171382495*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"08f265cf-f5c7-4c5c-a24d-6b5fdd0031a2"],

Cell["\<\
Here is an example of what a summarized time series will look like:\
\>", "Text",
 CellChangeTimes->{{3.7717031249225674`*^9, 3.7717031381393714`*^9}, {
  3.7717090225337334`*^9, 
  3.7717090246051116`*^9}},ExpressionUUID->"f13aa084-5b9d-4823-867f-\
417bb7e8c5ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimeSeriesCombination", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2019", ",", "6", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2019", ",", "7", ",", "5", ",", "0"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{3.771706174339743*^9},
 CellLabel->
  "In[149]:=",ExpressionUUID->"de102fbf-30e3-49be-b58f-41bc967fb1b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"2019060201\"\>", ",", "\<\"2019060202\"\>", 
   ",", "\<\"2019060203\"\>", ",", "\<\"2019060204\"\>", 
   ",", "\<\"2019060205\"\>", ",", "\<\"2019060206\"\>", 
   ",", "\<\"2019060207\"\>", ",", "\<\"2019060208\"\>", 
   ",", "\<\"2019060209\"\>", ",", "\<\"2019060210\"\>", 
   ",", "\<\"2019060211\"\>", ",", "\<\"2019060212\"\>", 
   ",", "\<\"2019060213\"\>", ",", "\<\"2019060214\"\>", 
   ",", "\<\"2019060215\"\>", ",", "\<\"2019060216\"\>", 
   ",", "\<\"2019060217\"\>", ",", "\<\"2019060218\"\>", 
   ",", "\<\"2019060219\"\>", ",", "\<\"2019060220\"\>", 
   ",", "\<\"2019060221\"\>", ",", "\<\"2019060222\"\>", 
   ",", "\<\"2019060223\"\>", ",", "\<\"20190603W\"\>", 
   ",", "\<\"20190609W\"\>", ",", "\<\"20190615W\"\>", 
   ",", "\<\"20190621W\"\>", ",", "\<\"20190627W\"\>", 
   ",", "\<\"20190703\"\>", ",", "\<\"20190704\"\>", 
   ",", "\<\"2019070500\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771706175784404*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"d0e5deb5-bcdf-4dae-b6a5-c290ebd0304c"]
}, Open  ]],

Cell["\<\
To make this time series more readable, we can go ahead and group it by the \
type of object. In this case, all consecutive hours will be grouped together, \
than days, weeks, etc. \
\>", "Text",
 CellChangeTimes->{{3.77170906356404*^9, 
  3.771709116974578*^9}},ExpressionUUID->"1df5178f-1e10-444a-bf2f-\
7d4600df53d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"SplitBy", "[", 
   RowBox[{
    RowBox[{"TimeSeriesCombination", "[", 
     RowBox[{
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2017", ",", "6", ",", "2", ",", "15"}], "}"}], "]"}], ",", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2019", ",", "7", ",", "12", ",", "0"}], "}"}], "]"}]}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{"StringLength", "[", "#", "]"}], "&"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7717030749623165`*^9, 3.7717031168271875`*^9}, {
  3.771705000937092*^9, 3.7717050210237684`*^9}, {3.771705081260748*^9, 
  3.7717051713803825`*^9}, {3.771705220246073*^9, 3.7717052403311357`*^9}, {
  3.7717054826023445`*^9, 3.7717054827154183`*^9}, {3.77170607136442*^9, 
  3.7717060722955723`*^9}, {3.771706119415482*^9, 3.771706156663126*^9}, {
  3.771706237099904*^9, 3.7717062829336033`*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"15b58335-6ea9-478e-a89c-de7ade8c3c2e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"\<\"2017060215\"\>", ",", "\<\"2017060216\"\>", 
       ",", "\<\"2017060217\"\>", ",", "\<\"2017060218\"\>", 
       ",", "\<\"2017060219\"\>", ",", "\<\"2017060220\"\>", 
       ",", "\<\"2017060221\"\>", ",", "\<\"2017060222\"\>", 
       ",", "\<\"2017060223\"\>"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"\<\"20170603\"\>", ",", "\<\"20170604\"\>", 
       ",", "\<\"20170605\"\>", ",", "\<\"20170606\"\>"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"\<\"20170607W\"\>", ",", "\<\"20170613W\"\>", 
       ",", "\<\"20170619W\"\>", ",", "\<\"20170625W\"\>"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"\<\"201707\"\>", ",", "\<\"201708\"\>", ",", "\<\"201709\"\>", 
       ",", "\<\"201710\"\>", ",", "\<\"201711\"\>", ",", "\<\"201712\"\>"}], 
      "}"}]},
    {
     RowBox[{"{", "\<\"2018\"\>", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"\<\"201901\"\>", ",", "\<\"201902\"\>", ",", "\<\"201903\"\>", 
       ",", "\<\"201904\"\>", ",", "\<\"201905\"\>", ",", "\<\"201906\"\>"}], 
      "}"}]},
    {
     RowBox[{"{", "\<\"20190701W\"\>", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"\<\"20190707\"\>", ",", "\<\"20190708\"\>", 
       ",", "\<\"20190709\"\>", ",", "\<\"20190710\"\>", 
       ",", "\<\"20190711\"\>"}], "}"}]},
    {
     RowBox[{"{", "\<\"2019071200\"\>", "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.771703117655737*^9, {3.7717050025997033`*^9, 3.7717050218341713`*^9}, {
   3.7717050830515375`*^9, 3.771705172575328*^9}, {3.771705216456156*^9, 
   3.7717052415478163`*^9}, 3.7717054841385193`*^9, 3.771705595656826*^9, {
   3.7717061481357765`*^9, 3.771706158029348*^9}, {3.771706244249795*^9, 
   3.7717062838535852`*^9}},
 CellLabel->
  "Out[153]=",ExpressionUUID->"d71df7bf-c55f-46c7-82f4-3352968e6321"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation: Using Time Series To Calculate Weather Data", "Section",
 CellChangeTimes->{{3.7717105621656675`*^9, 
  3.7717105777650495`*^9}},ExpressionUUID->"d7303b98-ba36-4f63-85ab-\
531730593a41"],

Cell["\<\
Using this optimized time series summarization, I can find the maximum, \
minimum, and the mean air temperature for a time series. For now, the \
functions only apply to Waltham, MA. An extra parameter will be needed to \
allow users to select their locations.\
\>", "Text",
 CellChangeTimes->{{3.771710620170281*^9, 3.771710648718279*^9}, {
  3.7717106906832037`*^9, 
  3.7717107429990244`*^9}},ExpressionUUID->"3a71b4b1-5201-4a76-b2c4-\
00428674e805"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MaxTemperatureInterval", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2016", ",", "8", ",", "13", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2018", ",", "2", ",", "23", ",", "23"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7717033955178604`*^9, 3.771703421992483*^9}, {
  3.7717035635126595`*^9, 3.771703568152748*^9}, {3.7717036064912634`*^9, 
  3.77170360836652*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"488241c1-6007-4005-9553-e72f8df4a661"],

Cell[BoxData[
 TemplateBox[{
  "81.78799999999998`","\"\[Degree]F\"","degrees Fahrenheit",
   "\"DegreesFahrenheit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.7717034239487767`*^9, 3.7717035703382053`*^9, 
  3.771703614762768*^9, 3.771707286628345*^9, 3.7717074847918935`*^9, 
  3.7717084753678603`*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"fe5e554f-fe8c-4ebe-823d-770f17ea2a6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MinTemperatureInterval", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2016", ",", "8", ",", "13", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2018", ",", "2", ",", "23", ",", "23"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771703431708942*^9, 3.7717034333960705`*^9}, 
   3.7717035658242064`*^9, {3.7717036101607065`*^9, 3.771703610568986*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"e18d23f3-f9b3-469f-ab3d-9407ece54f7e"],

Cell[BoxData[
 TemplateBox[{
  "0.7100014999999615`","\"\[Degree]F\"","degrees Fahrenheit",
   "\"DegreesFahrenheit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.7717034354284253`*^9, 3.7717035748482084`*^9, 
  3.771703617676711*^9, 3.771707329279393*^9, 3.7717074913112373`*^9, 
  3.77170848107465*^9},
 CellLabel->
  "Out[189]=",ExpressionUUID->"c169ad25-b246-4e92-a84c-c029ca1ee260"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MeanTemperatureInterval", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2016", ",", "8", ",", "13", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{"2018", ",", "2", ",", "23", ",", "23"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771703457753276*^9, 3.771703459853672*^9}, {
  3.771703550523015*^9, 3.7717035562258186`*^9}, {3.77170361206398*^9, 
  3.771703612422219*^9}, {3.7717078088349524`*^9, 3.7717078158886447`*^9}, {
  3.7717078995851974`*^9, 3.7717079054230824`*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"f6923142-daa9-499d-8708-38e850ac2967"],

Cell[BoxData[
 TemplateBox[{
  "48.595301279667986`","\"\[Degree]F\"","degrees Fahrenheit",
   "\"DegreesFahrenheit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.771703464432721*^9, 3.7717035815516667`*^9, 
  3.771703622409397*^9, 3.7717071842677555`*^9, 3.771707848695321*^9, 
  3.771707909047494*^9, 3.77170837028469*^9, 3.7717084862220755`*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"5150c551-4f34-4f59-aaa0-1d1b21638494"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation: How Efficient Is This Function? ", "Section",
 CellChangeTimes->{{3.7717018530826445`*^9, 3.7717018665496073`*^9}, {
  3.771711969981513*^9, 
  3.7717119759664965`*^9}},ExpressionUUID->"b59ea92b-8835-4102-a815-\
80a268252d8c"],

Cell["\<\
We decided to conduct a test. We determine how time it takes for the \
algorithm we determined, and also the existing algorithm, to determine the \
mean temperature throughout 300 time series, each ending at 2018/12/31 but \
have lengths of 1 day, 2 days, ...  We find that initially the existing \
method is more efficient. However, as the number of days increase my method \
starts to prevail. \
\>", "Text",
 CellChangeTimes->{{3.77170187065734*^9, 
  3.7717019993990216`*^9}},ExpressionUUID->"3a28545c-1891-40a2-97be-\
be999d151268"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Legended", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{
          RowBox[{"Timing", "[", 
           RowBox[{"Quantity", "[", 
            RowBox[{
             RowBox[{"MeanTemperatureInterval", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"DateObject", "[", 
                 RowBox[{"{", 
                  RowBox[{"2018", ",", "12", ",", "31"}], "}"}], "]"}], "-", 
                RowBox[{"Quantity", "[", 
                 RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], ",", 
               RowBox[{"DateObject", "[", 
                RowBox[{"{", 
                 RowBox[{"2018", ",", "12", ",", "31"}], "}"}], "]"}]}], 
              "]"}], ",", "\"\<DegreesFahrenheit\>\""}], "]"}], "]"}], ",", 
          "1"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "300"}], "}"}]}], "]"}], ",", 
      "\"\<My Method\>\""}], "]"}], ",", 
    RowBox[{"Legended", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{
          RowBox[{"Timing", "[", 
           RowBox[{"Mean", "[", 
            RowBox[{"AirTemperatureData", "[", 
             RowBox[{
              NamespaceBox["LinguisticAssistant",
               
               DynamicModuleBox[{Typeset`query$$ = "Waltham", 
                Typeset`boxes$$ = TemplateBox[{"\"Waltham\"", 
                  RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}], 
                  "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\
\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
                Typeset`allassumptions$$ = {{
                 "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
                  "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
                  "Values" -> {{
                    "name" -> "{Waltham, Massachusetts, UnitedStates}", 
                    "desc" -> "Waltham (Massachusetts, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.\
UnitedStates--"}, {
                    "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
                    "Waltham (Vermont, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--\
"}, {"name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
                    "Waltham (Maine, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"},\
 {"name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
                    "Waltham (North East Lincolnshire, United Kingdom)", 
                    "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
                    "name" -> 
                    "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
                    "desc" -> 
                    "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds \
(Leicestershire, United Kingdom)", "input" -> 
                    "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.\
Leicestershire.UnitedKingdom--"}, {
                    "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
                    "Waltham (Minnesota, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates-\
-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
                Typeset`querystate$$ = {
                "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                 1.4109402`7.6010536008999505, "Messages" -> {}}}, 
                DynamicBox[ToBoxes[
                  AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
                   Dynamic[Typeset`query$$], 
                   Dynamic[Typeset`boxes$$], 
                   Dynamic[Typeset`allassumptions$$], 
                   Dynamic[Typeset`assumptions$$], 
                   Dynamic[Typeset`open$$], 
                   Dynamic[Typeset`querystate$$]], StandardForm],
                 ImageSizeCache->{142., {7., 17.}},
                 TrackedSymbols:>{
                  Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
                   Typeset`assumptions$$, Typeset`open$$, 
                   Typeset`querystate$$}],
                DynamicModuleValues:>{},
                UndoTrackedVariables:>{Typeset`open$$}],
               BaseStyle->{"Deploy"},
               DeleteWithContents->True,
               Editable->False,
               SelectWithContents->True], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"DateObject", "[", 
                  RowBox[{"{", 
                   RowBox[{"2018", ",", "12", ",", "31"}], "}"}], "]"}], "-", 
                 RowBox[{"Quantity", "[", 
                  RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], ",", 
                RowBox[{"DateObject", "[", 
                 RowBox[{"{", 
                  RowBox[{"2018", ",", "12", ",", "31"}], "}"}], "]"}]}], 
               "}"}]}], "]"}], "]"}], "]"}], ",", "1"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "300"}], "}"}]}], "]"}], ",", 
      "\"\<Existing Method\>\""}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.771685403611401*^9, 3.7716854065774484`*^9}, {
  3.771692102989225*^9, 
  3.77169214421967*^9}},ExpressionUUID->"dcdde650-1c4e-46a2-b469-\
76989c769c01"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, 
       TagBox[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxd2DmvXDUYgGEn7Puwhy04YYtQhIZ9J2bfYQhbICxOIGEnEypKlynnJ7ik
vGVKlymn4AdYVJFAaISEBBISCPl9rzRzm0/PfP5sH/uM55y75+iJg8d2hhD2
7wjh/zj+VgdG/JkY0gi/4AvxWTzBv+JrhstveNdw+hPfTP53HIfbH3jvRvvb
af83vhP/g/fR3nneTfyX/P7huIPP7xkx78TTEes5+F76Pxffx/z0/bS3vwdo
b/2D9H8efoj5XYAfxq7jI8zvEvzoiN32j9He/OOMfxl+gvmZf5L5XI6fIn8F
PsD8zKcR5+xjwdF9fZr5mMflKvLPjLh1NZ/j2ZXknx1xSvuCF7QPz5G/jjxe
XEv++RGTeby0/gXmS/uCi/Uvjlitx1s4vDRivoG8Nv8y13MTeby4nvwrI06s
x1McXh1xbj2emX+N+d9IHi9xeJ36W8jjtJv8G+T5HhV8CIc3R6zmcdlDfjbi
KZzwbC/tcMENL61/a8RMPuHT1uMz1uMZ3+twcMQJTnjXbdTjGW54n/Vvjxjv
oB7/5LmBPTcaTrQP74x41np8Ghf8I2440V94l3gXn+OJ5xQujo/PWP8en+OE
O+dawX/Rf8Pb5837I0bOi6TPpx2unA8NN8+PQ7TjfEs4c74VXDlfm+3pP3zA
eJxnCTdccLmIz/H2+fchdv440L7gzHjN9uTD4RH7xXyOC/0VnBmvHd4Y/yMi
65Nwv5R6nDgvm+1dv4/X55s2XHC0HmfrP9kYHzd+P4p5rqdp5/8pda6fdv1x
9fqx90vII3bWN+b1fML+/mTt+mDXt+LmfDfad/vH4QiR/Yu4kE+afD6ycX3Y
+69u9Ndwwx1XHI6uzy9i79eE3Z98dL2+YO+Xihf8Xjbs72u33t/rzxiH9YrY
+zdpri/j5vqbp7+KK7/3baO+4+j353P6xRFX19+814/dn4J9/qjY55mGvX+6
7d3/YyNOeF6I2OeXhCvOONG+mGd9K/Z5o9me+m7/Pg8dX7/eiJvjY59z8/H1
+RbcGa/i5HmFXa+OXe/wBeOyPlG7/przImPPn4JXzKduuOHt+w97v4QvN8bH
wevHifXKePt81Myn2p/nHXZ/unmf376iHfmI/f4k7PmXcWe+Ba/cf7x0/61n
vI5njv815r0l4ilOeEV/GSefZ7HPoxUH1qdh17djv5/hmxEnXj+u7F/Crk82
7/5j7++Ku+uPI/PteOnz+bd87vcPR+aX8NTxcfD6bc96Vez6NvOuv3b879av
L+IF/Sfsfma88nke+35Q8Rw37H52XBz/e/rjfSHiLfcfF/rLuPq+g+d+//D2
+Y+n5DvO3n8nRnS9Il7hpKnPeO742Pu74sT8G154/fbn+9Gc/ljfyXx9fhG7
v1OcqE94yfrM8Iz3o2x/5Ocb9QW7nwvr3U/7p78t3HDDnf6WG+54wv8hVrjw
PhZOMh/exybY96+IXe8pzl4/Dnh2cn3+2fbMd27e90X7p36hyVccmf8WLrz/
NedLfok9Hzp2PVZ45fvjD/TD/CY4ef14cuuIUxyoT3jFfGfW876ZrSc/N09/
BWfurwU+RX11fvzfaAsv2b9m/7vTf1tCDrk=
          "]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {1}}]& ], 
       TagBox[{
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxd1zlwHFUQANCxuQQYEGeJe2wuAwYWc4nTHzAgwMBiLgEGxsYGgQ0WFIEC
gh8QKNyAQAHBBAQKFSogmNABgQICZUyBqxBFslCmUHEXzGtXaR3411P37/49
MyvtbD1wdO+hzUVR7NhUFP+t3b/hrm791lqk///P3/FY5+J7Hhc/zhfxDzwh
/ye+Qjxciv/I2/hnvjZtPNf1I/HtI/GbOqdfeId+J/hW/pV7nZvf+Hb1wjvl
/853iK/znfwn36XeH3y3+N98j/NFfFL8L75XPHzfiO9X/x9+QHyzOg92a+u+
FQ/Jj/27OlcRT+azP3O7Sfxh+aeKczpd/BFxzlyeJv6ofM6cTxHfbY36nM7y
88ecx3OX+eRz+PhIf05niD9hjTjXcb4pP5efuT1b/EnznCPOxXnWp7q1OVec
2zPFn97ozDnie5wn4uGY/5mR/lzH+Z61bhEfcfHcxvNmzhHvq6d+Csc8nC8w
JxcXWp/v1lm/BxIX8jNX4g3X58vbaz5OPODMiRtuov8LG+OJV+L3EjfRP/Kd
r3ixW4ecuL7Efi71a/jk/C/Zz4lz/B7kHjfccPFyty7Ffk7Rn3sX28eD+L36
iv4xP1fimZe4ifjl9k+rd6n93OMclt9wX7x41T71EzfyM/ejP1dx/V+TJz/x
4Eo/59rfjYbb6P+6epfZz33OXMb5eVa82MdX2c/D6B/xq+3nvnjxhv4xP/fk
Z07qN9yap3izW1fkJy7kZx7G/FzKL97q1iV/RxO3nLncan/kq19U3TpQr6w2
njdx5oqXo37sdz1qbuJ68aL+Lc9zsV8fLvdvjCcuuOK5a/Tn1W3684zvDU3k
i7cjLg6YR72Se5y4f53+EY/PB69Ff57ihkvXr+Uinr+35cf8HPcv8bTzVDzu
PJl70Z9XY35esr+NevE96mC3DtQrOXEKy694Wf3MczfoP7K/ibj8llvx4lC3
LkR/XlQvcdzfimc4c6l+HfkxP6+r13Id3xvf6daB611ya97Ex+L544ozT3LN
a/o1PBbXP/LFi3ft8zyVnGJ+buL+85rzZW7j88cD8zV8LObn8Zh/Rt0b9ecZ
TjzHFY/drH/s93mvIz/mj7jv5S2vRP/39OWSp+N7PC/H54/7MT/XXHPrvA0v
irexP67/+906NE/JE86TOJ73ilfVzxzPe83rzt9wKb/lRf2Kw906Htefy1vU
5Xn5Fa/G9Q87b83xHtTwtHh7eOP5iiPdusYlj3lvStw6T8VlvFfxHNecna/h
nnjLs+oVHzh/9OeZuP8Rj+ePJ2J+HkZ/jve8JuLcch39P+zWBS55Kubn7d4T
Kz7iPTFzJV7z5/FeyZ9wy1viPfNotx73nllyG88ffx39OUd/rryX1rxPvYYP
ym95Pd5jZ7t1N4/zN1xyVq/HDSdecD/6vH6bc/Gn3pNneYv6mb8y34Dn437y
mPu3xNPiDcfnZSXi3PI+9YcjLj7q1s94nJfjfvCU69cbiSeeME+f18QrPsiz
vKBf5hPqD7gXzxOPu55LPB3PF0+Kr/BcPG+8R/1hzBP3/+Nu/SLm5y+55Crm
51o88Qr3eVJ+NRKf5dV4fvmE8wx4Pp5nnnb9lrj0PDU8tjP9Cy9XNiQ=
          "]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {2}}]& ]}, {
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {1}}]& ], 
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {2}}]& ]}, {
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {1}}]& ], 
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {
          2}}]& ], {}, {}, {}}, {
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {1}}]& ], 
       TagBox[{
         Directive[
          PointSize[
           NCache[
            Rational[1, 120], 0.008333333333333333]], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, 
        Annotation[#, {{Legended}, Charting`Private`Tag$2345341, {
          2}}]& ], {}, {}, {}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 300.}, {0, 20.484375}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"My Method\"", "\"Existing Method\"", "None", "None"}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#3, ",", #4}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}]}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.771690232767098*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"30ea5ce9-e066-481d-975d-ee8b1d89578c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Why This Function Is Actually More Important Than Just The Efficiency  \
\>", "Section",
 CellChangeTimes->{{3.7717107914342594`*^9, 3.771710818083994*^9}, {
  3.771711979114586*^9, 
  3.77171200091831*^9}},ExpressionUUID->"fae7420c-fdc8-4998-abf9-\
9e0bf16b04ae"],

Cell["\<\
To double check that my code makes sense, I go back to check the calculated \
value against the value that is calculated using the existing method. When I \
look at the values, there seems to be some differences.\
\>", "Text",
 CellChangeTimes->{{3.7717108368294716`*^9, 3.7717109604757586`*^9}, {
  3.771711022376959*^9, 3.7717110240830936`*^9}, {3.771711104271454*^9, 
  3.771711109421889*^9}},ExpressionUUID->"9731ea7b-9594-4780-af1e-\
5f0be6f2ee20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"MeanTemperatureInterval", "[", 
     RowBox[{
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "2016/02/03", Typeset`boxes$$ = 
        RowBox[{"DateObject", "[", 
          RowBox[{"{", 
            RowBox[{"2016", ",", " ", "2", ",", " ", "3"}], "}"}], "]"}], 
        Typeset`allassumptions$$ = {{
         "type" -> "MultiClash", "word" -> "", "template" -> 
          "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
          "Values" -> {{
            "name" -> "DateObject", "word" -> "2016/02/03", "desc" -> 
             "a date", "input" -> "*MC.2016%2F02%2F03-_*DateObject-"}, {
            "name" -> "FracNumber", "word" -> "2016/02", "desc" -> 
             " referring to math", "input" -> 
             "*MC.2016%2F02%2F03-_*FracNumber-"}}}, {
         "type" -> "DateOrder", "template" -> 
          "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", 
          "Values" -> {{
            "name" -> "YearMonthDay", "desc" -> "year/month/day", "input" -> 
             "DateOrder_**Year.Month.Day--"}, {
            "name" -> "YearDayMonth", "desc" -> "year/day/month", "input" -> 
             "DateOrder_**Year.Day.Month--"}}}}, Typeset`assumptions$$ = {}, 
        Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.5513658`7.192984817775853, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{237., {8., 18.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True], ",", 
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "2018/11/15", Typeset`boxes$$ = 
        RowBox[{"DateObject", "[", 
          RowBox[{"{", 
            RowBox[{"2018", ",", " ", "11", ",", " ", "15"}], "}"}], "]"}], 
        Typeset`allassumptions$$ = {{
         "type" -> "MultiClash", "word" -> "", "template" -> 
          "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
          "Values" -> {{
            "name" -> "DateObject", "word" -> "2018/11/15", "desc" -> 
             "a date", "input" -> "*MC.2018%2F11%2F15-_*DateObject-"}, {
            "name" -> "FracNumber", "word" -> "2018/11", "desc" -> 
             " referring to math", "input" -> 
             "*MC.2018%2F11%2F15-_*FracNumber-"}}}}, 
        Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
        Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.4943301`7.14556204916393, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{251., {8., 18.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True]}], "]"}], ",", "\"\<DegreesFahrenheit\>\""}],
    "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771453422047742*^9, 3.7714534593085365`*^9}, {
   3.771453997004209*^9, 3.771453998416157*^9}, {3.7714540288666286`*^9, 
   3.7714540373492737`*^9}, {3.7714545895287657`*^9, 
   3.7714546170742893`*^9}, {3.771710991320282*^9, 3.7717110287171707`*^9}, 
   3.7717110812121162`*^9},ExpressionUUID->"ba82907d-7aac-4b20-8cce-\
c48658a9aa18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.453125`", ",", 
   TemplateBox[{
    "52.16357538337598`","\"\[Degree]F\"","degrees Fahrenheit",
     "\"DegreesFahrenheit\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7714534604753146`*^9, 3.7714537181209326`*^9, 3.7714538159470468`*^9, {
   3.7714538713539143`*^9, 3.7714538950617*^9}, 3.771453932898881*^9, 
   3.771454059626091*^9, 3.7714546265106573`*^9, 3.7715151237906904`*^9, {
   3.77151516092842*^9, 3.771515174635537*^9}, 3.771515239979021*^9, 
   3.7715172814967537`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"ab31ecac-44bc-4a88-b9e4-4b0644b98137"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Mean", "[", 
   RowBox[{"AirTemperatureData", "[", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
       TemplateBox[{"\"Waltham\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                 "\"UnitedStates\""}], "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
         "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
         "Values" -> {{
           "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
            "Waltham (Massachusetts, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"},\
 {"name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
            "Waltham (Vermont, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
           "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
            "Waltham (Maine, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
           "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", 
            "desc" -> "Waltham (North East Lincolnshire, United Kingdom)", 
            "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
           "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
            "desc" -> 
            "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
            "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
           "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
            "Waltham (Minnesota, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        1.4109402`7.6010536008999505, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{142., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2016", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2018", ",", "11", ",", "16"}], "}"}], "]"}]}], "}"}]}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714540865647945`*^9, 3.7714541275867834`*^9}, {
  3.7714541664443784`*^9, 3.7714541698186235`*^9}, {3.771710861176673*^9, 
  3.7717108614948874`*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"c83a0278-1a94-4015-ab2d-74ae77a79f93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"66.40625`", ",", 
   TemplateBox[{
    "52.09541027563178`","\"\[Degree]F\"","degrees Fahrenheit",
     "\"DegreesFahrenheit\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{3.771454164310955*^9, 3.771454223610423*^9, 
  3.7715151492876596`*^9, 3.771515311226717*^9, 3.771517339159278*^9, 
  3.7717109406205473`*^9},
 CellLabel->
  "Out[191]=",ExpressionUUID->"eff01b2b-37d9-4956-bc59-8a4b5ec2933b"]
}, Open  ]],

Cell["\<\
The difference is even bigger (up to 1.5 degrees Fahrenheit) when we are \
looking at smaller time intervals.\
\>", "Text",
 CellChangeTimes->{{3.771711115221749*^9, 
  3.7717111849523783`*^9}},ExpressionUUID->"f7d1e498-9682-4353-bfd5-\
5c1d15e814fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"MeanTemperatureInterval", "[", 
     RowBox[{
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "2018/11/13", Typeset`boxes$$ = 
        RowBox[{"DateObject", "[", 
          RowBox[{"{", 
            RowBox[{"2018", ",", " ", "11", ",", " ", "13"}], "}"}], "]"}], 
        Typeset`allassumptions$$ = {{
         "type" -> "MultiClash", "word" -> "", "template" -> 
          "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
          "Values" -> {{
            "name" -> "DateObject", "word" -> "2018/11/13", "desc" -> 
             "a date", "input" -> "*MC.2018%2F11%2F13-_*DateObject-"}, {
            "name" -> "FracNumber", "word" -> "2018/11", "desc" -> 
             " referring to math", "input" -> 
             "*MC.2018%2F11%2F13-_*FracNumber-"}}}}, 
        Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
        Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.7074714`7.301253881405038, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{251., {8., 18.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True], ",", 
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "2018/11/15", Typeset`boxes$$ = 
        RowBox[{"DateObject", "[", 
          RowBox[{"{", 
            RowBox[{"2018", ",", " ", "11", ",", " ", "15"}], "}"}], "]"}], 
        Typeset`allassumptions$$ = {{
         "type" -> "MultiClash", "word" -> "", "template" -> 
          "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
          "Values" -> {{
            "name" -> "DateObject", "word" -> "2018/11/15", "desc" -> 
             "a date", "input" -> "*MC.2018%2F11%2F15-_*DateObject-"}, {
            "name" -> "FracNumber", "word" -> "2018/11", "desc" -> 
             " referring to math", "input" -> 
             "*MC.2018%2F11%2F15-_*FracNumber-"}}}}, 
        Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
        Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.4943301`7.14556204916393, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{251., {8., 18.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True]}], "]"}], ",", "\"\<DegreesFahrenheit\>\""}],
    "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771454679366601*^9, 3.7714546960149527`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"3ca6b896-fc6a-42da-a347-d6cd83e7cdcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.390625`", ",", 
   TemplateBox[{
    "35.526619202823994`","\"\[Degree]F\"","degrees Fahrenheit",
     "\"DegreesFahrenheit\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{3.771517266778037*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"bca258d5-4c76-44f3-84a4-0f5f7dd294a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Mean", "[", 
   RowBox[{"AirTemperatureData", "[", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
       TemplateBox[{"\"Waltham\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                 "\"UnitedStates\""}], "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
         "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
         "Values" -> {{
           "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
            "Waltham (Massachusetts, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"},\
 {"name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
            "Waltham (Vermont, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
           "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
            "Waltham (Maine, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
           "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", 
            "desc" -> "Waltham (North East Lincolnshire, United Kingdom)", 
            "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
           "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
            "desc" -> 
            "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
            "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
           "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
            "Waltham (Minnesota, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        1.4109402`7.6010536008999505, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{142., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2018", ",", "11", ",", "13"}], "}"}], "]"}], ",", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2018", ",", "11", ",", "16"}], "}"}], "]"}]}], "}"}]}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771454722338639*^9, 3.771454740171745*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"7ce4da33-bb26-472f-8efe-76c91d2f8347"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3125`", ",", 
   TemplateBox[{
    "37.17448159571641`","\"\[Degree]F\"","degrees Fahrenheit",
     "\"DegreesFahrenheit\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{3.7715172697989345`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"47ad3f88-0fb5-44cf-874a-73fe1771290a"]
}, Open  ]],

Cell["\<\
While I wonder what is causing this difference, I remembered my initial \
experiment on time series and remembered that the number of data points for \
each day is not equal:  \
\>", "Text",
 CellChangeTimes->{{3.7717111897515726`*^9, 
  3.7717112411687922`*^9}},ExpressionUUID->"88963b98-c232-4a21-8f58-\
77df2e0ce952"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AirTemperatureData", "[", 
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
     TemplateBox[{"\"Waltham\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Waltham\"", ",", "\"Massachusetts\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
     Typeset`allassumptions$$ = {{
      "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
       "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
       "Values" -> {{
         "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
          "Waltham (Massachusetts, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"}, {
         "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
          "Waltham (Vermont, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
         "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
          "Waltham (Maine, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
         "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
          "Waltham (North East Lincolnshire, United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
         "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
          "desc" -> 
          "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
         "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
          "Waltham (Minnesota, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
     Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
     Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      1.4109402`7.6010536008999505, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{142., {7., 17.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "13"}], "}"}], "]"}], ",", 
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "14"}], "}"}], "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715174043766437`*^9, 3.7715174590763826`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"f44f0b50-f002-47da-bb9f-024fff0fd6b7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TimeSeries",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"13 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"13 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["38", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"13 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"13 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["38", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "360"], ",", "\"Day\""}], "}"}], 
                  "SummaryItem"]}]}, {
               TagBox["\"\"", "SummaryItem"], 
               RowBox[{
                 TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TemporalData[TimeSeries, {{
     StructuredArray[QuantityArray, {38}, 
      StructuredArray`StructuredData[QuantityArray, CompressedData["
1:eJxTTMoPSmVkYGBQA2KO64sLbLlcHdBpj5LYHwe/Ojs4cAEFal3hNEz+w9TK
1evY3eC0hsQ50zM+bg4KJ9fce1iFRC8I8JdndXeIuNzcFFTh7jChzmSOkTGC
L+GodbSPyQODBttf6uEQ4c2Y+f8/ggbb3+UJcc9fT4cKkXXuD3954aQtHlaJ
rGv3grsD3d0wGuZeXPIw/wMAJzODoQ==
       "], "DegreesFahrenheit", {{1}}]]}, CompressedData["
1:eJxd0DsOAjEMBNBFouIWNNQeO/HnCEhUHIECiYpiub9Ih4dmtU+OJhOfH+/7
87Bt235cn9tr//zp0nU9rR+LCZllLj+6FtFnZwiIFsSgqBSKykFR6cjOSJom
mLMfLtC9NZgTSqRWldSqytthiMjo1N55rQPEEGIKRVVvBahmpxlNLfu9oF0B
3juv19FUjTnA7KuDBrUyUA0bdJElJQ9dyV9vh2G8
    "], 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
    ValueDimensions -> 1, DateFunction -> Automatic, 
     ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, True, 
   12.],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7715174625675306`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"ef0b0b90-6821-4d00-a7c1-1e8c6c1ceb4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AirTemperatureData", "[", 
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
     TemplateBox[{"\"Waltham\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Waltham\"", ",", "\"Massachusetts\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
     Typeset`allassumptions$$ = {{
      "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
       "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
       "Values" -> {{
         "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
          "Waltham (Massachusetts, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"}, {
         "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
          "Waltham (Vermont, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
         "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
          "Waltham (Maine, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
         "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
          "Waltham (North East Lincolnshire, United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
         "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
          "desc" -> 
          "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
         "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
          "Waltham (Minnesota, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
     Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
     Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      1.4109402`7.6010536008999505, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{142., {7., 17.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "14"}], "}"}], "]"}], ",", 
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "15"}], "}"}], "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771517471005302*^9, 3.7715174742824445`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"6b9e4bad-5b14-4670-baa3-1995792bee31"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TimeSeries",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["24", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["24", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "\"Hour\""}], "}"}], "SummaryItem"]}]}, {
               TagBox["\"\"", "SummaryItem"], 
               RowBox[{
                 TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TemporalData[TimeSeries, {{
     StructuredArray[QuantityArray, {24}, 
      StructuredArray`StructuredData[
      QuantityArray, {42.98000000000002, 42.079999999999984`, 
       42.079999999999984`, 42.079999999999984`, 39.01998199999997, 
       35.96001799999999, 33.98000000000002, 33.079999999999984`, 
       31.999989013663992`, 30.91997839999999, 30.91997839999999, 
       30.91997839999999, 33.98000000000002, 33.98000000000002, 
       35.060018000000014`, 35.060018000000014`, 35.060018000000014`, 
       33.98000000000002, 33.98000000000002, 33.98000000000002, 
       31.999989013663992`, 30.01998199999997, 28.940017999999952`, 
       28.940017999999952`}, "DegreesFahrenheit", {{1}}]]}, {
     TemporalData`DateSpecification[{2018, 11, 14, 0, 56, 0.}, {
      2018, 11, 14, 23, 56, 0.}, {1, "Hour"}]}, 1, {"Continuous", 1}, {
    "Discrete", 1}, 1, {
    ValueDimensions -> 1, DateFunction -> Automatic, 
     ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, True, 
   12.],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7715174764575677`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"f881d740-5cde-4616-9c09-8fdb762b3a36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AirTemperatureData", "[", 
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
     TemplateBox[{"\"Waltham\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Waltham\"", ",", "\"Massachusetts\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
     Typeset`allassumptions$$ = {{
      "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
       "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
       "Values" -> {{
         "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
          "Waltham (Massachusetts, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"}, {
         "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
          "Waltham (Vermont, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
         "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
          "Waltham (Maine, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
         "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
          "Waltham (North East Lincolnshire, United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
         "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
          "desc" -> 
          "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
          "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
         "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
          "Waltham (Minnesota, USA)", "input" -> 
          "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
     Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
     Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      1.4109402`7.6010536008999505, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{142., {7., 17.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "15"}], "}"}], "]"}], ",", 
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{"2018", ",", "11", ",", "16"}], "}"}], "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715174848111186`*^9, 3.7715174931098166`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"4b503e16-d477-4d1b-b3d7-b2acbe0d27a4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TimeSeries",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"15 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"15 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["25", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {}, {
                GrayLevel[0.5], 
                PointSize[0.125], 
                AbsoluteThickness[1.5], 
                StyleBox[
                 LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                  "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}}, 
             AspectRatio -> 1, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
             GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
             DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{0., 50.}, {-7.030970816185017, 
              4.273359296964368}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{1, 1}, {1, 1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               TagBox[
                TemplateBox[{
                  RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"15 Nov 2018 00:56:00\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"15 Nov 2018 23:56:00\"", "SummaryItem"]}]}, 
                 "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["25", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "72"], ",", "\"Day\""}], "}"}], 
                  "SummaryItem"]}]}, {
               TagBox["\"\"", "SummaryItem"], 
               RowBox[{
                 TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TemporalData[TimeSeries, {{
     StructuredArray[QuantityArray, {25}, 
      StructuredArray`StructuredData[
      QuantityArray, {26.96001799999999, 24.980000000000018`, 
       24.079999999999984`, 22.99998199999999, 21.919981999999948`, 
       21.919981999999948`, 21.01998199999997, 19.940017999999952`, 
       19.940017999999952`, 21.01998199999997, 21.01998199999997, 
       21.01998199999997, 21.919981999999948`, 24.079999999999984`, 
       26.060018000000014`, 26.060018000000014`, 28.040017999999918`, 
       30.01998199999997, 30.91997839999999, 30.91997839999999, 
       30.01998199999997, 30.01998199999997, 30.91997839999999, 
       30.01998199999997, 30.91997839999999}, "DegreesFahrenheit", {{
       1}}]]}, {{{3751232160, 3751235760, 3751239360, 3751242960, 3751246560, 
    3751250160, 3751253760, 3751257360, 3751260960, 3751264560, 3751268160, 
    3751271760, 3751275360, 3751278960, 3751282560, 3751286160, 3751289760, 
    3751293360, 3751296960, 3751300560, 3751304160, 3751307760, 3751311360, 
    3751312560, 3751314960}}}, 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
    ValueDimensions -> 1, DateFunction -> Automatic, 
     ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, True, 
   12.],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771517494589534*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"a01f6b49-531a-4ba3-890e-c8976c63cc36"]
}, Open  ]],

Cell["\<\
Using the dataset that I have, I calculated and confirmed that the existing \
system simply takes all the data points during that time interval and \
averages it out. What this means is that the mechanism will favour some \
mechanisms over the others. In the case between 2018/11/13 to 2018/11/15, the \
temperature is larger because the date, whose temperature is 46.5 F (higher \
than the other two dates) is favoured during the calculation. Thus, my method \
of calculation will provide a more calculation of the mean because every day \
will have the same weight during the calculation. 
Note that my mechanism is not perfect. This comes from the fact that the \
daily temperatures are calculated with the same method that caused the \
accuracies in the existing mechanism, and the unequal representation of hours \
is a glaring issue in calculating daily temperatures: \
\>", "Text",
 CellChangeTimes->{{3.7717112692204556`*^9, 3.7717113688087387`*^9}, {
  3.7717114140528016`*^9, 
  3.771711570280779*^9}},ExpressionUUID->"146fe968-d750-4329-8790-\
619c08ea4f92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"AirTemperatureData", "[", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
       TemplateBox[{"\"Waltham\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                 "\"UnitedStates\""}], "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
         "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
         "Values" -> {{
           "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
            "Waltham (Massachusetts, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.UnitedStates--"},\
 {"name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
            "Waltham (Vermont, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}, {
           "name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
            "Waltham (Maine, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, {
           "name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", 
            "desc" -> "Waltham (North East Lincolnshire, United Kingdom)", 
            "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
           "name" -> "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
            "desc" -> 
            "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds (Leicestershire, \
United Kingdom)", "input" -> 
            "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.Leicestershire.\
UnitedKingdom--"}, {
           "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
            "Waltham (Minnesota, USA)", "input" -> 
            "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--"}}}}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        1.2770584`7.55775575154076, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{142., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2018", ",", "7", ",", "17"}], "}"}], "]"}], ",", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2018", ",", "7", ",", "18"}], "}"}], "]"}]}], "}"}]}], 
    "]"}], ",", 
   RowBox[{"Mesh", " ", "\[Rule]", " ", "All"}], ",", " ", 
   RowBox[{"MeshStyle", " ", "\[Rule]", " ", "Red"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715412192593856`*^9, 3.7715412772676864`*^9}, {
  3.771541335607515*^9, 3.77154135203644*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"eb467b2b-fa0a-46da-986d-86c2c5ad76b1"],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQDQRLvt977fjnPxDYBzsA+Wk/UfkWnPdfO96pElnn
fjAIxP/FhcrfwwPkH/mqEdPfFALi1/EB+SVA6YdWoSC+gwCQb8N1fXFBbRiI
zyQE5M8psOW67gzmHxFG5W8RuY9if6QokJ+SBgTPAkH8chDfxBgIisH8NhBf
pvV14I46MP8iKr+BVQxV3kMc5p6/YPnj4jD7D4P5BhIofAYuSVT1dpKo6jvR
+NFSqPxlUqjuP4MmzyCNyvdG419C5TP0yaDyA+RQ1VvIo8oLKaDyR+N7BMU3
AJR9kzM=
    "], {{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}]}}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {
      {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
       1.6], PointBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}]}, {}}, {
      {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
       1.6]}, {}}}], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.74077776*^9, 68.68},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->FrontEndValueCache[{{Automatic, Automatic}, {
      Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
      Charting`DateTicksFunction[
      Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, {{
     Automatic, Automatic}, {{{3.7407744*^9, 
        FormBox[
         StyleBox["\"00:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7407888*^9, 
        FormBox[
         StyleBox["\"04:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408032*^9, 
        FormBox[
         StyleBox["\"08:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408176*^9, 
        FormBox[
         StyleBox["\"12:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.740832*^9, 
        FormBox[
         StyleBox["\"16:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408464*^9, 
        FormBox[
         StyleBox["\"20:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408608*^9, 
        FormBox[
         StyleBox["\"00:00\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}, {{3.7407744*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7407888*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408032*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408176*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.740832*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408464*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7408608*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}}}],
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "NoShowPlotTheme" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{3.74077776*^9, 3.74086056*^9}, {68.68, 89.95999999999998}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{}, Automatic}]], "Output",
 CellChangeTimes->{{3.7715412635665665`*^9, 3.7715412813934317`*^9}, {
  3.771541337321656*^9, 3.771541353439382*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"c4dfad5d-c173-4961-9099-face3ae94946"]
}, Open  ]],

Cell["\<\
In this case, the temperature during 2:00 and 10:00 is not even calculated! \
When calculating averages, 18:00-24:00 will be heavily favoured and the mean \
temperature for the date will be a lot close to the 70 F mark as a result. \
Thus, daily temperatures should eventually be calculated by averaging the \
values for all the hours. \
\>", "Text",
 CellChangeTimes->{{3.7717117025908356`*^9, 
  3.7717118499331193`*^9}},ExpressionUUID->"eb91bb7b-9381-4ed9-9aa5-\
da02e09607d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Using Time Series To Obtain Relevant Information About Weather Data\
\>", "Section",
 CellChangeTimes->{{3.7716898563521757`*^9, 3.7716898601026793`*^9}, {
  3.7717007926451497`*^9, 3.771700799206522*^9}, {3.7717103389468107`*^9, 
  3.7717103433757567`*^9}},ExpressionUUID->"f856abc6-cd04-4c29-865a-\
4a22c4672054"],

Cell[CellGroupData[{

Cell["Separate The Objects In The Combination Into Separate Lists", \
"Subsection",
 CellChangeTimes->{{3.7717008432560906`*^9, 3.771700862055603*^9}, {
  3.771712006032712*^9, 
  3.7717120205803967`*^9}},ExpressionUUID->"5ae98f61-a735-421e-b1a3-\
3d3a80a2174a"],

Cell["\<\
Recall the time series combination that we came up with in section 1? What we \
are going to do here is that we are going to go ahead and divide that giant \
list of representations into five categories: Complete years, months, weeks, \
dates, and hours. How we are going to do this is that we are going to examine \
the character of each object. Years will only have 4 digits, months will have \
two more (to denote the month), dates will have two more than that, weeks \
will have an extra \[OpenCurlyDoubleQuote]W\[CloseCurlyDoubleQuote] at the \
end whereas hours will have a two digit number at the end to denote the hour. \
\>", "Text",
 CellChangeTimes->{{3.7717008024877057`*^9, 3.771700817252785*^9}, {
  3.77170086677874*^9, 3.771700876125969*^9}, {3.7717009130255194`*^9, 
  3.77170105542629*^9}},ExpressionUUID->"c743303a-f00b-4ec4-952c-\
58ef6fc2be72"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"yearSet", "[", 
    RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"TimeSeriesCombination", "[", 
      RowBox[{"start", ",", "end"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", "#", "]"}], " ", "\[Equal]", " ", "4"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771449242006555*^9, 3.771449250427161*^9}, {
  3.771449286100895*^9, 3.7714492875258503`*^9}, {3.771451881053397*^9, 
  3.7714519262902503`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ce8d005e-92a5-4e6b-ad88-61e422079192"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"monthSet", "[", 
    RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"TimeSeriesCombination", "[", 
      RowBox[{"start", ",", "end"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", "#", "]"}], " ", "\[Equal]", " ", "6"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771449255015207*^9, 3.77144929087508*^9}, 
   3.7714518829086313`*^9, {3.7714520852467594`*^9, 3.7714520955556216`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"098cc091-9228-4e92-a5d4-03e0957da599"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"weekSet", "[", 
    RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"TimeSeriesCombination", "[", 
      RowBox[{"start", ",", "end"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", "#", "]"}], " ", "\[Equal]", " ", "9"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714492962977796`*^9, 3.771449321829774*^9}, 
   3.771451884479677*^9, {3.771452099308126*^9, 3.771452127837105*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"b71fe719-9a13-448a-b61f-2dd9b9d6fa55"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dateSet", "[", 
    RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"TimeSeriesCombination", "[", 
      RowBox[{"start", ",", "end"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", "#", "]"}], " ", "\[Equal]", " ", "8"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714475743827705`*^9, 3.771447674566767*^9}, 
   3.771447747310179*^9, {3.7714492111870527`*^9, 3.7714492147424126`*^9}, {
   3.771449283940463*^9, 3.771449293098653*^9}, {3.771450814900199*^9, 
   3.7714508152624435`*^9}, 3.77145188551436*^9, {3.7714521151306553`*^9, 
   3.7714521307390447`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"bcf5c157-66a2-4edc-8d78-36c574923671"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"hourSet", "[", 
    RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"TimeSeriesCombination", "[", 
      RowBox[{"start", ",", "end"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", "#", "]"}], " ", "\[Equal]", " ", "10"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7716831327626295`*^9, 3.7716831631708755`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"211bb56a-e8dd-4c64-a4e1-32c07c9081b9"],

Cell["\<\
Now, to grasp information on a particular year, month, etc., we need to get \
the data files first by getting the year number and importing the file that \
has information on all the (year or month or week or day or hour) information \
for that year. \
\>", "Text",
 CellChangeTimes->{{3.7717010634346266`*^9, 
  3.771701161053588*^9}},ExpressionUUID->"2a3ec139-b87b-4fcb-adaa-\
35f73863023a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureFileYear", "[", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", " ", "@", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", "\"\<all-years.csv\>\"", "]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714504388569336`*^9, 3.771450461779182*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"5f87564e-965e-40f5-9f41-1595d7f77b61"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureFileMonth", "[", "date_String", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", " ", "@", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"date", ",", "4"}], "]"}], ",", "\"\<-month.csv\>\""}], 
        "}"}], "]"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714504354206467`*^9, 3.7714504367335143`*^9}, {
  3.7714504705260124`*^9, 3.7714504717988567`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"d5896f2b-ccdc-4a08-a77e-9e3123ec0ee9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureFileWeek", "[", "date_String", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", " ", "@", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"date", ",", "4"}], "]"}], ",", "\"\<-week.csv\>\""}], 
        "}"}], "]"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714504202765675`*^9, 3.7714504313399324`*^9}, {
  3.7714504756834435`*^9, 3.771450477024335*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"74a2677b-6e5d-4e3c-bedb-d355fcc2c722"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureFileDay", "[", "date_String", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", " ", "@", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"date", ",", "4"}], "]"}], ",", "\"\<-day.csv\>\""}], "}"}],
        "]"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714486930657463`*^9, 3.7714489143105507`*^9}, {
  3.7714489643904753`*^9, 3.771448965795416*^9}, {3.7714490000792313`*^9, 
  3.771449050692917*^9}, {3.771450405980054*^9, 3.77145040638132*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"625433df-f1b7-423e-9589-5aa4de1f624b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureFileHour", "[", "date_String", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", " ", "@", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"date", ",", "4"}], "]"}], ",", "\"\<-hour.csv\>\""}], 
        "}"}], "]"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771683211574817*^9, 3.771683218407365*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"2f7cee33-ca96-49e9-9e9a-172d910589c6"],

Cell["\<\
Then we use the functions below to obtain information regarding the maximum, \
minimum, and mean value of the year, month, and week and the temperature of \
the day and hour. \
\>", "Text",
 CellChangeTimes->{{3.771701166166997*^9, 3.7717011824528365`*^9}, {
  3.771701445934949*^9, 3.771701459311859*^9}, {3.7717015102177362`*^9, 
  3.7717015366623306`*^9}},ExpressionUUID->"dd684b48-8d8a-4d44-8f82-\
600dea7f92db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureYearMax", "[", "yearList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileYear", "[", "]"}], "[", "#", "]"}], "[", 
     "\"\<Max\>\"", "]"}], "&"}], "/@", "yearList"}]}]], "Input",
 CellChangeTimes->{{3.7714503745050993`*^9, 3.7714503969700584`*^9}, {
  3.7714504851527443`*^9, 3.771450493478285*^9}, {3.771450546374488*^9, 
  3.771450546829792*^9}, {3.7714508315662932`*^9, 3.771450858256049*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"a0538fe9-89a9-44ae-8c4c-292b152d7c86"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureYearMin", "[", "yearList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileYear", "[", "]"}], "[", "#", "]"}], "[", 
     "\"\<Min\>\"", "]"}], "&"}], "/@", "yearList"}]}]], "Input",
 CellChangeTimes->{{3.771450576467515*^9, 3.7714505827206726`*^9}, {
  3.771450883770036*^9, 3.771450913490814*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"f49d3ef0-b257-4121-b595-0a7d62e07ec0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureYearMean", "[", "yearList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileYear", "[", "]"}], "[", "#", "]"}], "[", 
     "\"\<Mean\>\"", "]"}], "&"}], "/@", "yearList"}]}]], "Input",
 CellChangeTimes->{{3.7714505793194213`*^9, 3.771450585299388*^9}, {
  3.7714508879117928`*^9, 3.771450914122236*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"6be5ed4c-5bdd-4c73-91b5-8382b271ffdf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureMonthMax", "[", "monthList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileMonth", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Max\>\"", "]"}], "&"}], "/@", "monthList"}]}]], "Input",
 CellChangeTimes->{{3.7714503745050993`*^9, 3.7714503969700584`*^9}, {
  3.7714504851527443`*^9, 3.771450493478285*^9}, {3.771450546374488*^9, 
  3.771450546829792*^9}, {3.7714506096886272`*^9, 3.77145063765524*^9}, {
  3.7714508893137255`*^9, 3.7714509162506533`*^9}, {3.77145177007353*^9, 
  3.771451782701936*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"7a11c59b-50da-4e0a-9130-fc12796b81d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureMonthMin", "[", "monthList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileMonth", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Min\>\"", "]"}], "&"}], "/@", "monthList"}]}]], "Input",
 CellChangeTimes->{{3.771450576467515*^9, 3.7714505827206726`*^9}, {
  3.771450614058528*^9, 3.7714506433520308`*^9}, {3.771450890578565*^9, 
  3.7714509180408416`*^9}, {3.7714517767830043`*^9, 3.771451783484462*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"edb51f50-69fd-4ab9-9cab-ce3ebf077842"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureMonthMean", "[", "monthList_List", "]"}], " ", ":=", 
  " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileMonth", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Mean\>\"", "]"}], "&"}], "/@", "monthList"}]}]], "Input",
 CellChangeTimes->{{3.7714505793194213`*^9, 3.771450585299388*^9}, {
  3.7714506179981503`*^9, 3.771450647368704*^9}, {3.771450892116583*^9, 
  3.7714509198770638`*^9}, {3.77145177810188*^9, 3.771451784225957*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"a1eb4489-d996-4c85-9874-877bfc0eb0a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureWeekMax", "[", "weekList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileWeek", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Max\>\"", "]"}], "&"}], "/@", "weekList"}]}]], "Input",
 CellChangeTimes->{{3.7714503745050993`*^9, 3.7714503969700584`*^9}, {
  3.7714504851527443`*^9, 3.771450493478285*^9}, {3.771450546374488*^9, 
  3.771450546829792*^9}, {3.7714506096886272`*^9, 3.77145063765524*^9}, {
  3.7714506770394497`*^9, 3.7714506826832*^9}, {3.771450893311386*^9, 
  3.7714509219374375`*^9}, {3.771451786552504*^9, 3.7714517981122*^9}, {
  3.7714523819702473`*^9, 3.7714523838034678`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"b5505dbf-69a3-473c-be61-bb5c42a620f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureWeekMin", "[", "weekList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileWeek", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Min\>\"", "]"}], "&"}], "/@", "weekList"}]}]], "Input",
 CellChangeTimes->{{3.771450576467515*^9, 3.7714505827206726`*^9}, {
  3.771450614058528*^9, 3.7714506433520308`*^9}, {3.7714506864256988`*^9, 
  3.7714506879757304`*^9}, {3.7714508959511356`*^9, 3.771450923658575*^9}, {
  3.77145179327798*^9, 3.7714517988096557`*^9}, {3.7714523897504272`*^9, 
  3.7714523916196694`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"fc3ed0d1-b9fb-49e9-87a8-3f8f6cfa2b6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureWeekMean", "[", "weekList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileWeek", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Mean\>\"", "]"}], "&"}], "/@", "weekList"}]}]], "Input",
 CellChangeTimes->{{3.7714505793194213`*^9, 3.771450585299388*^9}, {
  3.7714506179981503`*^9, 3.771450647368704*^9}, {3.7714506911498427`*^9, 
  3.7714506938716536`*^9}, {3.771450897093901*^9, 3.771450925837033*^9}, {
  3.771451794791988*^9, 3.771451799489122*^9}, {3.771452393953224*^9, 
  3.7714523959995866`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"18f25405-9852-44ad-9c70-a0b631976d66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureDay", "[", "dayList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileDay", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Temperature\>\"", "]"}], "&"}], "/@", "dayList"}]}]], "Input",
 CellChangeTimes->{{3.771449054124194*^9, 3.7714490732699428`*^9}, {
  3.771449190623352*^9, 3.771449193502269*^9}, {3.7714504090380864`*^9, 
  3.771450409459363*^9}, {3.7714508997066393`*^9, 3.771450927469118*^9}, {
  3.7714518018957095`*^9, 3.7714518088063154`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"896fe277-2400-4eb4-8b2f-f7d25bb69e66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temperatureHour", "[", "dayList_List", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"temperatureFileHour", "[", "#", "]"}], "[", "#", "]"}], "[", 
     "\"\<Temperature\>\"", "]"}], " ", "&"}], "/@", " ", 
   "dayList"}]}]], "Input",
 CellChangeTimes->{{3.7716831784130106`*^9, 3.771683237494068*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"5f2613c2-bab0-40f9-baad-6489ff2743b9"],

Cell["\<\
Using that information, we are going to determine the maximum, minimum, and \
the mean temperature of whatever interval the function implementer requested. \
With maximum and minimum it is pretty straight forward because we can simply \
determine the max/min out of all of the values. However, with the mean \
temperature, we need to first determine how many days are in the year/month \
satisfied before we calculated average. This is because we need to keep in \
mind that the average for, let us say an entire year, represents the fact \
that when we calculate the average, we have to consider 365/366 days with the \
temperature at that number. \
\>", "Text",
 CellChangeTimes->{{3.771701541449522*^9, 3.7717015492367067`*^9}, {
  3.7717015951952925`*^9, 
  3.7717018442237453`*^9}},ExpressionUUID->"7813a60b-0765-46b4-9d8d-\
ef3ff2e26cf8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MaxTemperatureInterval", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"Max", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"temperatureYearMax", "[", 
         RowBox[{"yearSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureMonthMax", "[", 
         RowBox[{"monthSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureWeekMax", "[", 
         RowBox[{"weekSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureDay", "[", 
         RowBox[{"dateSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureHour", "[", 
         RowBox[{"hourSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
    ",", "\"\<DegreesFahrenheit\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77145214685977*^9, 3.771452173612339*^9}, {
  3.7714522278844557`*^9, 3.771452273149582*^9}, {3.771453431117778*^9, 
  3.77145343125887*^9}, {3.7717072341500244`*^9, 3.771707277236411*^9}, {
  3.7717074136878605`*^9, 3.7717074621250954`*^9}, {3.7717084142101555`*^9, 
  3.771708428650767*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"73371d58-3f1c-4e19-bac5-cf6ab0146045"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MinTemperatureInterval", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"Min", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"temperatureYearMin", "[", 
         RowBox[{"yearSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureMonthMin", "[", 
         RowBox[{"monthSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureWeekMin", "[", 
         RowBox[{"weekSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureDay", "[", 
         RowBox[{"dateSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], ",", 
        RowBox[{"temperatureHour", "[", 
         RowBox[{"hourSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
    ",", "\"\<DegreesFahrenheit\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7714524624758263`*^9, 3.7714524771926155`*^9}, {
  3.771453433387288*^9, 3.771453433515373*^9}, {3.771707302987183*^9, 
  3.771707316473465*^9}, {3.7717074743712482`*^9, 3.771707474851568*^9}, {
  3.7717084318188686`*^9, 3.7717084438378763`*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"8d134efb-5acc-401f-a40a-b1a589b73569"],

Cell[BoxData[
 RowBox[{
  RowBox[{"daysInYear", "[", "year_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"year", ",", "4"}], "]"}], "\[Equal]", "0"}], ",", "366", ",", 
    "365"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7714526675649843`*^9, 3.7714526683715143`*^9}, {
  3.771452967013283*^9, 3.771453004905503*^9}, {3.7714531660033293`*^9, 
  3.771453174955295*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"263ca634-f1af-48fe-88f1-d7c1578b520d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"daysInMonth", "[", "month_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"daysInMonth", "[", 
   RowBox[{"DateObject", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"month", " ", "-", " ", 
         RowBox[{"Mod", "[", 
          RowBox[{"month", ",", "100"}], "]"}]}], ")"}], "/", "100"}], ",", 
      " ", 
      RowBox[{"Mod", "[", 
       RowBox[{"month", ",", "100"}], "]"}]}], "}"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771453150382941*^9, 3.7714532655896134`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"78d186a4-30f5-4e4b-a151-90be634ec3b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MeanTemperatureInterval", "[", 
   RowBox[{"start_DateObject", ",", "end_DateObject"}], "]"}], " ", ":=", " ",
   "\[IndentingNewLine]", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"24", "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"daysInYear", " ", "@", " ", 
               RowBox[{"Read", "[", 
                RowBox[{
                 RowBox[{"StringToStream", "[", "#", "]"}], ",", "Number"}], 
                "]"}]}], "&"}], "/@", 
             RowBox[{"yearSet", "[", 
              RowBox[{"start", ",", "end"}], "]"}]}], "*", 
            RowBox[{"temperatureYearMean", "[", 
             RowBox[{"yearSet", "[", 
              RowBox[{"start", ",", "end"}], "]"}], "]"}]}], "]"}], "+", 
          "\[IndentingNewLine]", 
          RowBox[{"Total", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"daysInMonth", " ", "@", " ", 
               RowBox[{"Read", "[", 
                RowBox[{
                 RowBox[{"StringToStream", "[", "#", "]"}], ",", "Number"}], 
                "]"}]}], "&"}], "/@", 
             RowBox[{"monthSet", "[", 
              RowBox[{"start", ",", "end"}], "]"}]}], " ", "*", " ", 
            RowBox[{"temperatureMonthMean", "[", 
             RowBox[{"monthSet", "[", 
              RowBox[{"start", ",", "end"}], "]"}], "]"}]}], "]"}], " ", "+", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Total", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"6", "*", "#"}], ")"}], "&"}], "/@", 
            RowBox[{"temperatureWeekMean", "[", 
             RowBox[{"weekSet", "[", 
              RowBox[{"start", ",", "end"}], "]"}], "]"}]}], "]"}], " ", "+", 
          " ", 
          RowBox[{"Total", "[", 
           RowBox[{"temperatureDay", "[", 
            RowBox[{"dateSet", "[", 
             RowBox[{"start", ",", "end"}], "]"}], "]"}], "]"}]}], ")"}]}], 
       "+", 
       RowBox[{"Total", "[", 
        RowBox[{"temperatureHour", "[", 
         RowBox[{"hourSet", "[", 
          RowBox[{"start", ",", "end"}], "]"}], "]"}], "]"}]}], ")"}], "/", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"QuantityMagnitude", "[", 
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"findYear", "[", "end", "]"}], ",", 
            RowBox[{"findMonth", "[", "end", "]"}], ",", 
            RowBox[{"findDate", "[", "end", "]"}], ",", 
            RowBox[{"findHour", "[", "end", "]"}]}], "}"}], "]"}], "-", 
         RowBox[{"DateObject", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"findYear", "[", "start", "]"}], ",", 
            RowBox[{"findMonth", "[", "start", "]"}], ",", 
            RowBox[{"findDate", "[", "start", "]"}], ",", 
            RowBox[{"findHour", "[", "start", "]"}]}], "}"}], "]"}]}], "]"}], 
       "+", "1"}], ")"}]}], ",", "\"\<DegreesFahrenheit\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7714530430779085`*^9, 3.7714531363496017`*^9}, {
   3.771453274001212*^9, 3.7714534283109074`*^9}, 3.771453706541231*^9, {
   3.7714537377820225`*^9, 3.7714538092285757`*^9}, {3.7714538399029875`*^9, 
   3.7714539257481203`*^9}, 3.771707137557831*^9, {3.7717071686694183`*^9, 
   3.771707177277285*^9}, {3.7717077017873163`*^9, 3.7717078014730525`*^9}, {
   3.771708303207817*^9, 3.7717083568205*^9}, {3.771708452929923*^9, 
   3.771708468980609*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"f8856bdb-611c-4bfa-9830-1917ac400fda"],

Cell["\<\
Let us put them to the test. Note these date objects are randomly selected.\
\>", "Text",
 CellChangeTimes->{{3.7717033877126613`*^9, 3.771703393295376*^9}, {
  3.771709816936265*^9, 
  3.771709829421577*^9}},ExpressionUUID->"fab1a5cb-127b-4e2b-9398-\
049842086a7a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Pre-Computation", "Section",
 CellChangeTimes->{{3.771689702697569*^9, 3.7716897044967675`*^9}, {
  3.7717102300722203`*^9, 
  3.7717102354641876`*^9}},ExpressionUUID->"97ccdb25-a299-4f54-81f7-\
2a509f3f625f"],

Cell["\<\
Please note that the data files are only for Waltham, MA for now. The goal \
eventually is to allow users to get data for more places. \
\>", "Text",
 CellChangeTimes->{{3.771700752237258*^9, 3.771700770689542*^9}, {
  3.7717094697251835`*^9, 
  3.771709496453978*^9}},ExpressionUUID->"dd50a461-6a70-410a-809a-\
95e07e306cd0"],

Cell["\<\
To get data files, we need the directory first. (The data file producing \
process is intended to improve the Wolfram Knowledge Base)\
\>", "Text",
 CellChangeTimes->{{3.771694527991572*^9, 3.771694538457529*^9}, {
  3.7717095228805585`*^9, 3.7717095401160364`*^9}, {3.7717099260468764`*^9, 
  3.7717100012709475`*^9}},ExpressionUUID->"21aaa47f-cbd1-4d24-8c4b-\
48b92c00ec53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  "\"\<C:\\\\Users\\\\Albert\\\\Desktop\\\\Wolfram Summer School \
2019\\\\Project\\\\Data Files\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771106860737934*^9, 3.7711068687977123`*^9}, {
  3.7711069043168354`*^9, 3.7711069067661877`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"204a1afa-0142-4ac0-ac58-8d8246c01b68"],

Cell[BoxData["\<\"C:\\\\Users\\\\Albert\\\\Desktop\\\\Wolfram Summer School \
2019\\\\Project\\\\Data Files\"\>"], "Output",
 CellChangeTimes->{3.7716589344794617`*^9, 3.771702090751295*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"f6e9c5c7-8660-4d3b-ba02-23f15db7c772"]
}, Open  ]],

Cell["\<\
This section will concern with generating the database that will generate the \
weather temperature data in association form. \
\>", "Text",
 CellChangeTimes->{{3.771693929661317*^9, 3.7716939564111204`*^9}, {
  3.7716941186227827`*^9, 
  3.7716941360173607`*^9}},ExpressionUUID->"2b7f1f5e-de53-4865-a042-\
aae6fdb56765"],

Cell["\<\
First we start with hours. However, it happens that there are certain hours \
with no data at all. This means that I will have to expand the time interval \
by an equal number of hours, one hour at a time, on each side to obtain the \
closest data point. We define a function first that may be expanded to other \
conditions (missing days, other location, etc.)\
\>", "Text",
 CellChangeTimes->{{3.7716943597335844`*^9, 3.7716943854877243`*^9}, {
  3.7716944241824837`*^9, 3.771694520380499*^9}, {3.771694552964192*^9, 
  3.7716945837416677`*^9}},ExpressionUUID->"a0380a8e-8c35-49f6-ae4f-\
8ec3f861840b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"timeData", "[", 
   RowBox[{
   "start_DateObject", ",", " ", "end_DateObject", ",", " ", "unit_Quantity", 
    ",", " ", "f_", ",", "location_"}], "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Quiet", "[", 
     RowBox[{
      RowBox[{"Check", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"location", ",", 
          RowBox[{"{", 
           RowBox[{"start", ",", "end"}], "}"}]}], "]"}], ",", "Missing"}], 
       "]"}], "===", " ", "Missing"}], "]"}], ",", " ", 
    RowBox[{"timeData", "[", 
     RowBox[{
      RowBox[{"start", " ", "-", " ", 
       RowBox[{"1", " ", "unit"}]}], ",", " ", 
      RowBox[{"end", " ", "+", " ", 
       RowBox[{"1", " ", "unit"}]}], ",", " ", "unit", ",", "f"}], "]"}], ",", 
    RowBox[{"Mean", "[", 
     RowBox[{"f", "[", 
      RowBox[{"location", ",", 
       RowBox[{"{", 
        RowBox[{"start", ",", "end"}], "}"}]}], "]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"c628c006-ab3b-44ec-bb8e-20ac0e464cbd"],

Cell["With that, we generate the hourly data in association form.", "Text",
 CellChangeTimes->{{3.7716945935842237`*^9, 3.771694601530506*^9}, {
  3.7716946337319374`*^9, 
  3.771694640484439*^9}},ExpressionUUID->"54affe59-20b7-4549-b7f8-\
16ba0573dc99"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hourlyData", "[", "year_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Monitor", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{"year", ",", "10", ",", "4"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"month", ",", "10", ",", "2"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"date", ",", "10", ",", "2"}], "]"}], ",", 
           RowBox[{"IntegerString", "[", 
            RowBox[{"hour", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], 
        "\[Rule]", " ", 
        RowBox[{"<|", 
         RowBox[{"\"\<Temperature\>\"", " ", "\[Rule]", 
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{"timeData", "[", 
            RowBox[{
             RowBox[{"DateObject", "[", 
              RowBox[{"{", 
               RowBox[{"year", ",", "month", ",", "date", ",", "hour"}], 
               "}"}], "]"}], ",", 
             RowBox[{
              RowBox[{"DateObject", "[", 
               RowBox[{"{", 
                RowBox[{"year", ",", "month", ",", "date", ",", "hour"}], 
                "}"}], "]"}], "+", 
              RowBox[{"Quantity", "[", 
               RowBox[{"1", ",", "\"\<hours\>\""}], "]"}]}], ",", 
             RowBox[{"Quantity", "[", 
              RowBox[{"1", ",", "\"\<hours\>\""}], "]"}], ",", 
             "AirTemperatureData", ",", 
             NamespaceBox["LinguisticAssistant",
              
              DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ =
                TemplateBox[{"\"Waltham\"", 
                 RowBox[{"Entity", "[", 
                   RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}], 
                 "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \
\\\"Massachusetts\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
               Typeset`allassumptions$$ = {{
                "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
                 "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
                 "Values" -> {{
                   "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
                    "Waltham (Massachusetts, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.\
UnitedStates--"}, {
                   "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
                    "Waltham (Vermont, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--\
"}, {"name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
                    "Waltham (Maine, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"},\
 {"name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
                    "Waltham (North East Lincolnshire, United Kingdom)", 
                    "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
                   "name" -> 
                    "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
                    "desc" -> 
                    "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds \
(Leicestershire, United Kingdom)", "input" -> 
                    "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.\
Leicestershire.UnitedKingdom--"}, {
                   "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
                    "Waltham (Minnesota, USA)", "input" -> 
                    "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates-\
-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
               Typeset`querystate$$ = {
               "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                0.6224091`7.24562092717377, "Messages" -> {}}}, 
               DynamicBox[ToBoxes[
                 AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
                  Dynamic[Typeset`query$$], 
                  Dynamic[Typeset`boxes$$], 
                  Dynamic[Typeset`allassumptions$$], 
                  Dynamic[Typeset`assumptions$$], 
                  Dynamic[Typeset`open$$], 
                  Dynamic[Typeset`querystate$$]], StandardForm],
                ImageSizeCache->{142., {7., 17.}},
                
                TrackedSymbols:>{
                 Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
                  Typeset`assumptions$$, Typeset`open$$, 
                  Typeset`querystate$$}],
               DynamicModuleValues:>{},
               UndoTrackedVariables:>{Typeset`open$$}],
              BaseStyle->{"Deploy"},
              DeleteWithContents->True,
              Editable->False,
              SelectWithContents->True]}], "]"}], "]"}]}], "|>"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"month", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"date", ",", "1", ",", 
         RowBox[{"daysInMonth", "[", 
          RowBox[{"DateObject", "[", 
           RowBox[{"{", 
            RowBox[{"year", ",", "month"}], "}"}], "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"hour", ",", "0", ",", "23"}], "}"}]}], "]"}], "|>"}], ",", 
    RowBox[{"ProgressIndicator", "[", 
     RowBox[{"month", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "12"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771657149110671*^9, 3.7716572052500334`*^9}, {
  3.771657238225977*^9, 3.7716573219957223`*^9}, {3.771657383755972*^9, 
  3.7716574094120407`*^9}, {3.7716574444435844`*^9, 3.7716575717883368`*^9}, {
  3.7716577016616263`*^9, 3.7716577093447375`*^9}, {3.7716603865494585`*^9, 
  3.7716605293375235`*^9}, {3.7716714614317646`*^9, 3.771671506139987*^9}, {
  3.7716826486098657`*^9, 3.7716826573156633`*^9}, {3.7716926197085066`*^9, 
  3.7716926576119814`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"14791d4e-1caf-413a-b77b-1cbf9c7a9a7c"],

Cell["\<\
Once we obtained the data, we generate the name of the file and export the \
data.\
\>", "Text",
 CellChangeTimes->{{3.771694611873398*^9, 
  3.771694630503789*^9}},ExpressionUUID->"703ddca6-7a6f-4cb9-abb4-\
5684c88c2e20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateFileHour", "[", "yearNumber_Integer", "]"}], " ", ":=", 
  " ", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"IntegerString", "[", "yearNumber", "]"}], ",", " ", 
     "\"\<-hour.csv\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713223634114046`*^9, 3.7713224372541933`*^9}, {
  3.77132459499109*^9, 3.771324598816328*^9}, {3.771658984608817*^9, 
  3.7716589892248945`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"de9f0c9a-4b44-4487-9b22-dad64675eb02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportHourlyFile", "[", "year_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"generateFileHour", "[", "year", "]"}], ",", 
    RowBox[{"hourlyData", "[", "year", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771658937796669*^9, 3.7716590229451137`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9b05946a-f7a9-4f8f-a434-06ea9b59efcf"],

Cell["\<\
Next we find the daily data. We first find the daily temperature. (Note this \
is not as accurate as if it is calculated as the average of the hourly data. \
However, the efficiency may be similar due to the similar amount of data \
points)\
\>", "Text",
 CellChangeTimes->{{3.7716946645374393`*^9, 3.7716947150137415`*^9}, {
  3.771710191338435*^9, 
  3.7717102885835333`*^9}},ExpressionUUID->"bbc8e817-5690-482d-b19e-\
a5e77c2b4f97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dailyData", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"<|", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IntegerString", "[", 
       RowBox[{
        RowBox[{"yearNumber", " ", "*", " ", "10000"}], "+", 
        RowBox[{"m", "*", "100"}], "+", "d"}], "]"}], "\[Rule]", " ", 
      RowBox[{"<|", 
       RowBox[{"\"\<Temperature\>\"", " ", "\[Rule]", "  ", 
        RowBox[{"QuantityMagnitude", "[", 
         RowBox[{"Mean", "[", 
          RowBox[{"AirTemperatureData", "[", 
           RowBox[{
            NamespaceBox["LinguisticAssistant",
             
             DynamicModuleBox[{Typeset`query$$ = "Waltham", Typeset`boxes$$ = 
              TemplateBox[{"\"Waltham\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Waltham\"", ",", "\"Massachusetts\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}], 
                "\"Entity[\\\"City\\\", {\\\"Waltham\\\", \\\"Massachusetts\\\
\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
              Typeset`allassumptions$$ = {{
               "type" -> "SubCategory", "word" -> "Waltham", "template" -> 
                "Assuming ${desc1}. Use ${desc2} instead", "count" -> "6", 
                "Values" -> {{
                  "name" -> "{Waltham, Massachusetts, UnitedStates}", "desc" -> 
                   "Waltham (Massachusetts, USA)", "input" -> 
                   "*DPClash.CityE.Waltham-_**Waltham.Massachusetts.\
UnitedStates--"}, {
                  "name" -> "{Waltham, Vermont, UnitedStates}", "desc" -> 
                   "Waltham (Vermont, USA)", "input" -> 
                   "*DPClash.CityE.Waltham-_**Waltham.Vermont.UnitedStates--"}\
, {"name" -> "{Waltham, Maine, UnitedStates}", "desc" -> 
                   "Waltham (Maine, USA)", "input" -> 
                   "*DPClash.CityE.Waltham-_**Waltham.Maine.UnitedStates--"}, \
{"name" -> "{Waltham, NorthEastLincolnshire, UnitedKingdom}", "desc" -> 
                   "Waltham (North East Lincolnshire, United Kingdom)", 
                   "input" -> 
                   "*DPClash.CityE.Waltham-_**Waltham.NorthEastLincolnshire.\
UnitedKingdom--"}, {
                  "name" -> 
                   "{WalthamOnTheWolds, Leicestershire, UnitedKingdom}", 
                   "desc" -> 
                   "Waltham\[Hyphen]on\[Hyphen]the\[Hyphen]Wolds \
(Leicestershire, United Kingdom)", "input" -> 
                   "*DPClash.CityE.Waltham-_**WalthamOnTheWolds.\
Leicestershire.UnitedKingdom--"}, {
                  "name" -> "{Waltham, Minnesota, UnitedStates}", "desc" -> 
                   "Waltham (Minnesota, USA)", "input" -> 
                   "*DPClash.CityE.Waltham-_**Waltham.Minnesota.UnitedStates--\
"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
              Typeset`querystate$$ = {
              "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
               3.7414843`8.02458892067425, "Messages" -> {}}}, 
              DynamicBox[ToBoxes[
                AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
                 Dynamic[Typeset`query$$], 
                 Dynamic[Typeset`boxes$$], 
                 Dynamic[Typeset`allassumptions$$], 
                 Dynamic[Typeset`assumptions$$], 
                 Dynamic[Typeset`open$$], 
                 Dynamic[Typeset`querystate$$]], StandardForm],
               ImageSizeCache->{142., {7., 17.}},
               
               TrackedSymbols:>{
                Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
                 Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
              DynamicModuleValues:>{},
              UndoTrackedVariables:>{Typeset`open$$}],
             BaseStyle->{"Deploy"},
             DeleteWithContents->True,
             Editable->False,
             SelectWithContents->True], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"DateObject", "[", 
               RowBox[{"{", 
                RowBox[{"yearNumber", ",", "m", ",", "d"}], "}"}], "]"}], ",", 
              RowBox[{
               RowBox[{"DateObject", "[", 
                RowBox[{"{", 
                 RowBox[{"yearNumber", ",", "m", ",", "d"}], "}"}], "]"}], 
               "+", 
               RowBox[{"Quantity", "[", 
                RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}]}], "}"}]}], "]"}],
           "]"}], "]"}]}], "|>"}]}], " ", ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "1", ",", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"daysInMonth", "[", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", 
              RowBox[{"yearNumber", ",", "k"}], "}"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "12"}], "}"}]}], "]"}], ",", "m"}], "]"}]}], 
      "}"}]}], "]"}], "\[IndentingNewLine]", "|>"}]}]], "Input",
 CellChangeTimes->{{3.771075040415679*^9, 3.771075238416483*^9}, {
   3.771075905874528*^9, 3.7710760522499976`*^9}, {3.771076085249866*^9, 
   3.771076151766287*^9}, {3.771076385747923*^9, 3.77107645050202*^9}, {
   3.7710764833618016`*^9, 3.771076508944886*^9}, {3.771076548665412*^9, 
   3.77107656049231*^9}, {3.771076591316886*^9, 3.7710766899827843`*^9}, {
   3.771077299247343*^9, 3.7710773225409*^9}, {3.7710774996511755`*^9, 
   3.7710775096208334`*^9}, {3.771077727374709*^9, 3.771077784866101*^9}, {
   3.7710786401858163`*^9, 3.771078647002375*^9}, {3.7710788812617707`*^9, 
   3.7710789499189653`*^9}, {3.7710850591276464`*^9, 3.771085068966216*^9}, {
   3.771085346592637*^9, 3.77108534730111*^9}, {3.7710862936919246`*^9, 
   3.7710862970361586`*^9}, {3.7710863524421663`*^9, 3.7710863658100853`*^9}, 
   3.7710865176778316`*^9, {3.77108902860435*^9, 3.7710890297831335`*^9}, 
   3.7711075288587775`*^9, {3.771111791794881*^9, 3.771111819617073*^9}, {
   3.771250545309388*^9, 3.771250723455021*^9}, {3.771250824937806*^9, 
   3.7712508394034395`*^9}, {3.771251130064295*^9, 3.771251148461314*^9}, {
   3.771251904756177*^9, 3.771251935793439*^9}, {3.771256293021337*^9, 
   3.7712563046961584`*^9}, {3.7712564851559296`*^9, 3.771256485448123*^9}, {
   3.7712599463340597`*^9, 3.771259955897417*^9}, {3.771442357276052*^9, 
   3.77144236444182*^9}, 3.7714425852008085`*^9, {3.7714426512070274`*^9, 
   3.771442665305418*^9}, {3.7714426991674385`*^9, 3.771442702207469*^9}, {
   3.771692041407239*^9, 3.771692044476281*^9}, {3.771703220037868*^9, 
   3.771703225035908*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"2e6917b1-0327-4351-9134-f0c088ba4816"],

Cell["\<\
Then we generate the file name of the data and export the data. \
\>", "Text",
 CellChangeTimes->{{3.7716947201423907`*^9, 
  3.7716947308555264`*^9}},ExpressionUUID->"6ac67e10-5d93-4397-af12-\
64fe1722baa6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateFileDay", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"IntegerString", "[", "yearNumber", "]"}], ",", " ", 
     "\"\<-day.csv\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713223634114046`*^9, 3.7713224372541933`*^9}, {
  3.77132459499109*^9, 3.771324598816328*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"d28a2fac-2d15-467e-8014-3c6504510358"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportDayFile", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"generateFileDay", "[", "yearNumber", "]"}], ",", 
    RowBox[{"dailyData", "[", "yearNumber", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715018019639482`*^9, 3.771501830883898*^9}, {
  3.7717032306136203`*^9, 3.771703230759726*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"1dfffe98-8d3d-43e8-a9b6-61f6e3cf2063"],

Cell["\<\
Now we move on to generate weekly data. Note that because it seems that it is \
more convenient to be able to have the week fall any time in the time series, \
we are generating data of all possible time series.  \
\>", "Text",
 CellChangeTimes->{{3.7716947372758007`*^9, 3.7716947399235554`*^9}, {
  3.7716998774650927`*^9, 
  3.771699962064153*^9}},ExpressionUUID->"a34b92f6-fe8b-432a-9986-\
a427630b7229"],

Cell["First, we import the daily data set.", "Text",
 CellChangeTimes->{{3.7716999687676144`*^9, 
  3.7716999768209763`*^9}},ExpressionUUID->"9d3a0a85-bd9a-4a04-9829-\
20a072fcfda8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dailyDataSet", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", "@", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"generateFileDay", "[", "yearNumber", "]"}], "]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7712557450251813`*^9, 3.7712557632584763`*^9}, {
   3.7712558943874884`*^9, 3.771255905022003*^9}, {3.771259488128111*^9, 
   3.771259491830573*^9}, 3.7713244974860964`*^9, {3.771324806393588*^9, 
   3.7713248103342123`*^9}, {3.771325320300152*^9, 3.771325349756755*^9}, {
   3.7713253911473017`*^9, 3.771325409713664*^9}, {3.771325483330289*^9, 
   3.7713255171269693`*^9}, {3.7713255493645926`*^9, 
   3.7713255494816713`*^9}, {3.771325611568469*^9, 3.7713256231205378`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"1676d1d4-f148-42fb-b22b-8ac764981629"],

Cell["\<\
The functions below will calculate the maximum, minimum, and mean air \
temperature for the week. \
\>", "Text",
 CellChangeTimes->{{3.7716999801481824`*^9, 3.771699999188858*^9}, {
  3.7717000489629855`*^9, 
  3.771700055039025*^9}},ExpressionUUID->"f3f50086-43cf-4f83-9941-\
a620a64feac1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maxAirTemperatureWeek", "[", "startDate_DateObject", "]"}], " ", ":=",
   " ", 
  RowBox[{"Max", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"dailyDataSet", "[", 
        RowBox[{"findYear", "[", "startDate", "]"}], "]"}], "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findYear", "[", 
             RowBox[{"startDate", " ", "+", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "4"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findMonth", "[", 
             RowBox[{"startDate", " ", "+", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findDate", "[", 
             RowBox[{"startDate", " ", "+", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}]}], "}"}], "]"}], "]"}], "[", 
      "\"\<Temperature\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "5"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713367291137676`*^9, 3.771336755879797*^9}, {
  3.7716920543798676`*^9, 3.771692088567625*^9}, {3.7717032350405664`*^9, 
  3.7717032353537836`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"154bd5cc-208e-49bf-acd8-df49f385bd84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"minAirTemperatureWeek", "[", "startDate_DateObject", "]"}], " ", ":=",
   " ", 
  RowBox[{"Min", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"dailyDataSet", "[", 
        RowBox[{"findYear", "[", "startDate", "]"}], "]"}], "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findYear", "[", 
             RowBox[{"startDate", " ", "+", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "4"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findMonth", "[", 
             RowBox[{"startDate", " ", "+", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findDate", "[", 
             RowBox[{"startDate", " ", "+", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}]}], "}"}], "]"}], "]"}], "[", 
      "\"\<Temperature\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "5"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771341626709035*^9, 3.771341633865789*^9}, {
   3.771692071257098*^9, 3.771692091428523*^9}, 3.7716925972941437`*^9, {
   3.7717032384328322`*^9, 3.7717032387830667`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"7850aac5-36bb-4369-98e2-42ad976ed9fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanAirTemperatureWeek", "[", "startDate_DateObject", "]"}], " ", ":=", 
  RowBox[{"Mean", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"dailyDataSet", "[", 
        RowBox[{"findYear", "[", "startDate", "]"}], "]"}], "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findYear", "[", 
             RowBox[{"startDate", " ", "+", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "4"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findMonth", "[", 
             RowBox[{"startDate", " ", "+", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"findDate", "[", 
             RowBox[{"startDate", " ", "+", 
              RowBox[{"Quantity", "[", 
               RowBox[{"n", ",", "\"\<Days\>\""}], "]"}]}], "]"}], ",", "10", 
            ",", "2"}], "]"}]}], "}"}], "]"}], "]"}], "[", 
      "\"\<Temperature\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "5"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7710783466143274`*^9, 3.7710784448974085`*^9}, {
   3.771080160101941*^9, 3.7710801605992737`*^9}, {3.7710833410131807`*^9, 
   3.7710834025863056`*^9}, {3.771090542003236*^9, 3.7710905432166004`*^9}, {
   3.771090680820054*^9, 3.771090787962414*^9}, 3.77109082883119*^9, {
   3.771250512648654*^9, 3.771250514921164*^9}, {3.7712508601641808`*^9, 
   3.771250908919898*^9}, 3.7712510692754183`*^9, {3.771255781504896*^9, 
   3.771255798847906*^9}, {3.7712597981594367`*^9, 3.771259811863558*^9}, {
   3.771259910763378*^9, 3.7712599386879673`*^9}, {3.771325577917445*^9, 
   3.77132559430952*^9}, {3.7713374400953083`*^9, 3.7713374417172327`*^9}, {
   3.771339019514496*^9, 3.771339055346083*^9}, {3.7716920830689588`*^9, 
   3.7716920939341908`*^9}, 3.771692601861187*^9, {3.7717032416009407`*^9, 
   3.7717032426196194`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"0db19d17-6792-460b-9860-fff7f3d90259"],

Cell["\<\
Now we attempt to generate the data set for the maximum, minimum, and mean \
temperature for the week. But before that happens, an adjustment is needed. \
Because of the fact 6-day weeks may go into the next year if the start date \
is later than December 26th, we generate the function that will give out the \
dates that the week can start on. \
\>", "Text",
 CellChangeTimes->{{3.771700062977315*^9, 
  3.771700207504614*^9}},ExpressionUUID->"c4917f9d-5017-4e70-9263-\
ada6d7690cda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"daysInMonthMaxForWeek", "[", "year_Integer", "]"}], ":=", " ", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"daysInMonth", "[", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"year", ",", "k"}], "}"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "12"}], "}"}]}], "]"}], ",", 
    RowBox[{"12", "\[Rule]", " ", "26"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712608990719557`*^9, 3.771261066699195*^9}, {
  3.771261125625414*^9, 3.7712611306327496`*^9}, {3.7713449945824575`*^9, 
  3.771345003744564*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"29243afe-e70d-48e9-b5d8-db68f033b486"],

Cell["\<\
Armed with that information, we can go ahead and generate the maximum, \
minimum, and mean temperature for all possible weeks during the year. \
\>", "Text",
 CellChangeTimes->{{3.771700210463583*^9, 
  3.771700247412166*^9}},ExpressionUUID->"dff5e182-ddfb-49a6-b12f-\
ef1d974af4c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"weeklyData", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"<|", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"IntegerString", "[", 
          RowBox[{"yearNumber", ",", "10", ",", "4"}], "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{"m", ",", "10", ",", "2"}], "]"}], ",", 
         RowBox[{"IntegerString", "[", 
          RowBox[{"d", ",", "10", ",", " ", "2"}], "]"}], ",", "\"\<W\>\""}], 
        "}"}], "]"}], "\[Rule]", " ", "\[IndentingNewLine]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Mean\>\"", " ", "\[Rule]", " ", 
         RowBox[{"QuantityMagnitude", "[", 
          RowBox[{"meanAirTemperatureWeek", "[", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", 
             RowBox[{"yearNumber", ",", "m", ",", "d"}], "}"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Max\>\"", " ", "\[Rule]", " ", 
         RowBox[{"QuantityMagnitude", "[", 
          RowBox[{"maxAirTemperatureWeek", "[", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", 
             RowBox[{"yearNumber", ",", "m", ",", "d"}], "}"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Min\>\"", " ", "\[Rule]", " ", 
         RowBox[{"QuantityMagnitude", "[", 
          RowBox[{"minAirTemperatureWeek", "[", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", 
             RowBox[{"yearNumber", ",", "m", ",", "d"}], "}"}], "]"}], "]"}], 
          "]"}]}]}], "\[IndentingNewLine]", "\t", "|>"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "12"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"d", ",", "1", ",", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"daysInMonthMaxForWeek", "[", "yearNumber", "]"}], ",", 
         "m"}], "]"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
   "|>"}]}]], "Input",
 CellChangeTimes->{{3.771080118055868*^9, 3.7710801581846685`*^9}, {
   3.7710804372740383`*^9, 3.7710805214893513`*^9}, {3.771148202152356*^9, 
   3.771148219696995*^9}, 3.7711482620020533`*^9, {3.771250525858443*^9, 
   3.771250527257373*^9}, {3.771251276891644*^9, 3.7712513251521063`*^9}, {
   3.771260650546116*^9, 3.7712606668469596`*^9}, {3.771260737548938*^9, 
   3.77126074622572*^9}, {3.7712607900899096`*^9, 3.7712608190917892`*^9}, {
   3.771260862211423*^9, 3.7712608744175453`*^9}, {3.771261155930586*^9, 
   3.771261207600974*^9}, {3.7712612395592427`*^9, 3.77126124087712*^9}, {
   3.7712612725237384`*^9, 3.7712612891237855`*^9}, {3.7713283219556875`*^9, 
   3.7713283739309397`*^9}, {3.7713288911513615`*^9, 
   3.7713289005611496`*^9}, {3.771329587812969*^9, 3.7713295903546605`*^9}, 
   3.7713296734291005`*^9, {3.771337489153409*^9, 3.771337504052698*^9}, {
   3.7713390587768683`*^9, 3.771339102299243*^9}, {3.7713403156351323`*^9, 
   3.771340323968671*^9}, {3.7713421963771014`*^9, 3.771342199607256*^9}, {
   3.7713449892869415`*^9, 3.7713449918616543`*^9}, {3.7717032543874426`*^9, 
   3.7717032666388454`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"322d365a-0ceb-4252-833c-d51b1b50073e"],

Cell["Once again, we generate the file name and export the file. ", "Text",
 CellChangeTimes->{{3.771700252661667*^9, 
  3.7717002660705824`*^9}},ExpressionUUID->"6a353123-6a44-42d3-b6da-\
d3a417cde4ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateFileWeek", "[", "yearNumber_Integer", "]"}], " ", ":=", 
  " ", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"IntegerString", "[", "yearNumber", "]"}], ",", " ", 
     "\"\<-week.csv\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713248352588034`*^9, 3.771324840483282*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"1fd000ad-f134-465a-b971-dd984e4a1eb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportWeekFile", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"generateFileWeek", "[", "yearNumber", "]"}], ",", 
    RowBox[{"weeklyData", "[", "yearNumber", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7717032691225057`*^9, 3.77170326918955*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"a5e56060-c396-4237-9b32-d0717e61a699"],

Cell["\<\
We move on to month. The process works the exact same as weeks, the only \
difference being that the data will be the twelve months. \
\>", "Text",
 CellChangeTimes->{{3.771700281480294*^9, 
  3.7717003228508244`*^9}},ExpressionUUID->"fa70d542-6d4d-4948-b987-\
680b5da0f514"],

Cell[BoxData[
 RowBox[{
  RowBox[{"weeklyDataSet", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"ToExpression", "@", 
   RowBox[{"First", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Import", "[", 
      RowBox[{"generateFileWeek", "[", "yearNumber", "]"}], "]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.77126034041549*^9, 3.7712603654631596`*^9}, 
   3.7713249097929063`*^9, {3.7713258706704082`*^9, 3.771325888445307*^9}, {
   3.771326609123636*^9, 3.7713266121563473`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"0956f844-1166-438c-ae84-def9c1064bb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maxAirTemperatureMonth", "[", "month_DateObject", "]"}], " ", ":=",
   " ", "\[IndentingNewLine]", 
  RowBox[{"Max", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"weeklyDataSet", "[", 
          RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"IntegerString", "[", 
             RowBox[{
              RowBox[{"10000", "*", 
               RowBox[{"findYear", "[", "month", "]"}]}], "+", 
              RowBox[{"100", "*", 
               RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], "]"}], 
            ",", "\"\<W\>\""}], "}"}], "]"}], "]"}], "[", "\"\<Max\>\"", 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "1", ",", 
         RowBox[{
          RowBox[{"Floor", "[", 
           RowBox[{
            RowBox[{"daysInMonth", "[", "month", "]"}], "/", "6"}], "]"}], 
          "*", "6"}], " ", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"dailyDataSet", "[", 
          RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"10000", "*", 
            RowBox[{"findYear", "[", "month", "]"}]}], "+", 
           RowBox[{"100", "*", 
            RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], "]"}], 
         "]"}], "[", "\"\<Temperature\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", 
         RowBox[{
          RowBox[{"daysInMonth", "[", "month", "]"}], " ", "-", " ", 
          RowBox[{"Mod", "[", 
           RowBox[{
            RowBox[{"daysInMonth", "[", "month", "]"}], ",", "6"}], "]"}], 
          "+", "1"}], ",", 
         RowBox[{"daysInMonth", "[", "month", "]"}]}], "}"}]}], "]"}]}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771343455637043*^9, 3.771343501110307*^9}, {
   3.7713437906649933`*^9, 3.771343802953751*^9}, 3.771343923603857*^9, {
   3.7713442334076743`*^9, 3.7713442386901984`*^9}, {3.771344273608432*^9, 
   3.771344280314901*^9}, {3.7713443567288218`*^9, 3.771344373807186*^9}, {
   3.771344408804301*^9, 3.77134441257982*^9}, {3.771344447218196*^9, 
   3.771344455588766*^9}, {3.7713446382896757`*^9, 3.7713446437037992`*^9}, {
   3.771345046865261*^9, 3.7713450471294394`*^9}, {3.7713457236460934`*^9, 
   3.7713457267521677`*^9}, {3.771345950871539*^9, 3.7713459541857505`*^9}, 
   3.7713462649156356`*^9, {3.771346439509817*^9, 3.7713464396409063`*^9}, {
   3.771346498233907*^9, 3.77134650819802*^9}, 3.7713465929764423`*^9, {
   3.7717032757649174`*^9, 3.771703275870989*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"b763bc3e-2a61-4a64-9348-055bf8113b2a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"minAirTemperatureMonth", "[", "month_DateObject", "]"}], " ", ":=",
   " ", "\[IndentingNewLine]", 
  RowBox[{"Min", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"weeklyDataSet", "[", 
          RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"IntegerString", "[", 
             RowBox[{
              RowBox[{"10000", "*", 
               RowBox[{"findYear", "[", "month", "]"}]}], "+", 
              RowBox[{"100", "*", 
               RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], "]"}], 
            ",", "\"\<W\>\""}], "}"}], "]"}], "]"}], "[", "\"\<Min\>\"", 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "1", ",", 
         RowBox[{
          RowBox[{"Floor", "[", 
           RowBox[{
            RowBox[{"daysInMonth", "[", "month", "]"}], "/", "6"}], "]"}], 
          "*", "6"}], " ", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"dailyDataSet", "[", 
          RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
         RowBox[{"IntegerString", "[", 
          RowBox[{
           RowBox[{"10000", "*", 
            RowBox[{"findYear", "[", "month", "]"}]}], "+", 
           RowBox[{"100", "*", 
            RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], "]"}], 
         "]"}], "[", "\"\<Temperature\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", 
         RowBox[{
          RowBox[{"daysInMonth", "[", "month", "]"}], " ", "-", " ", 
          RowBox[{"Mod", "[", 
           RowBox[{
            RowBox[{"daysInMonth", "[", "month", "]"}], ",", "6"}], "]"}], 
          "+", "1"}], ",", 
         RowBox[{"daysInMonth", "[", "month", "]"}]}], "}"}]}], "]"}]}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713435163584566`*^9, 3.7713435214828653`*^9}, {
   3.7713438073716846`*^9, 3.7713438076578817`*^9}, 3.7713439259424057`*^9, {
   3.7713442405494275`*^9, 3.771344244633154*^9}, 3.7713442886974792`*^9, 
   3.7713444229537215`*^9, {3.7713444635320606`*^9, 3.7713444640714197`*^9}, 
   3.771344653540354*^9, {3.7713450506177588`*^9, 3.771345050880934*^9}, {
   3.771345687087047*^9, 3.771345698017314*^9}, {3.771345956339178*^9, 
   3.7713459565613346`*^9}, 3.7713462712198315`*^9, {3.7713464422356386`*^9, 
   3.7713464424247656`*^9}, 3.7713465140098877`*^9, {3.771346595314991*^9, 
   3.771346595417066*^9}, {3.771703277701215*^9, 3.7717032793913407`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"61369389-a50a-4a22-9dcd-3f5c87074134"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanAirTemperatureMonth", "[", "month_DateObject", "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"6", "*", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"weeklyDataSet", "[", 
            RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"IntegerString", "[", 
               RowBox[{
                RowBox[{"10000", "*", 
                 RowBox[{"findYear", "[", "month", "]"}]}], "+", 
                RowBox[{"100", "*", 
                 RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], 
               "]"}], ",", "\"\<W\>\""}], "}"}], "]"}], "]"}], "[", 
          "\"\<Mean\>\"", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{
            RowBox[{"Floor", "[", 
             RowBox[{
              RowBox[{"daysInMonth", "[", "month", "]"}], "/", "6"}], "]"}], 
            "*", "6"}], " ", ",", "6"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"dailyDataSet", "[", 
           RowBox[{"findYear", "[", "month", "]"}], "]"}], "[", 
          RowBox[{"IntegerString", "[", 
           RowBox[{
            RowBox[{"10000", "*", 
             RowBox[{"findYear", "[", "month", "]"}]}], "+", 
            RowBox[{"100", "*", 
             RowBox[{"findMonth", "[", "month", "]"}]}], "+", "n"}], "]"}], 
          "]"}], "[", "\"\<Temperature\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{
           RowBox[{"daysInMonth", "[", "month", "]"}], " ", "-", " ", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"daysInMonth", "[", "month", "]"}], ",", "6"}], "]"}], 
           "+", "1"}], ",", 
          RowBox[{"daysInMonth", "[", "month", "]"}]}], "}"}]}], "]"}]}], 
     "]"}], "]"}], "/", 
   RowBox[{"daysInMonth", "[", "month", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7710808489543095`*^9, 3.771080863557067*^9}, {
   3.771080916205079*^9, 3.7710811231746035`*^9}, {3.771083441590559*^9, 
   3.7710834851086245`*^9}, {3.771083551336152*^9, 3.7710835573941956`*^9}, {
   3.771083608702903*^9, 3.7710836091622095`*^9}, {3.771083652904415*^9, 
   3.7710837535826483`*^9}, {3.771084225334922*^9, 3.771084226928996*^9}, {
   3.7712513354550495`*^9, 3.771251370052473*^9}, {3.7712604335176563`*^9, 
   3.771260503120929*^9}, {3.7712613383996596`*^9, 3.771261641599854*^9}, {
   3.771261831170985*^9, 3.771261831634294*^9}, {3.771325893905219*^9, 
   3.771325922851636*^9}, {3.7713260720678406`*^9, 3.771326072386059*^9}, {
   3.7713261101159368`*^9, 3.7713261460878725`*^9}, {3.7713271068001814`*^9, 
   3.771327126622528*^9}, {3.7713433442715735`*^9, 3.7713433995503716`*^9}, {
   3.771343439592358*^9, 3.771343440695092*^9}, {3.7713442475220685`*^9, 
   3.7713442565991173`*^9}, 3.771344293274518*^9, 3.771344425713561*^9, {
   3.7713444669273176`*^9, 3.771344467294568*^9}, 3.771344657349219*^9, {
   3.771345055634095*^9, 3.7713450559162855`*^9}, {3.771345711396219*^9, 
   3.771345715356859*^9}, {3.7713459589038854`*^9, 3.7713459597134304`*^9}, 
   3.771346275327565*^9, {3.7713464447683244`*^9, 3.7713464448613863`*^9}, 
   3.771346516887803*^9, {3.7713465975394745`*^9, 3.771346597668556*^9}, {
   3.771703281997074*^9, 3.7717032821721907`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"0cba0ac7-3cad-4ae8-b0e6-89253626c547"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"monthlyData", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"<|", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"IntegerString", "[", 
           RowBox[{"yearNumber", ",", "10", ",", "4"}], "]"}], ",", 
          RowBox[{"IntegerString", "[", 
           RowBox[{"m", ",", "10", ",", "2"}], "]"}]}], "}"}], "]"}], 
       "\[Rule]", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Mean\>\"", " ", "\[Rule]", " ", 
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{"meanAirTemperatureMonth", "[", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", 
              RowBox[{"yearNumber", ",", "m"}], "}"}], "]"}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Max\>\"", " ", "\[Rule]", " ", 
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{"maxAirTemperatureMonth", "[", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", 
              RowBox[{"yearNumber", ",", "m"}], "}"}], "]"}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Min\>\"", " ", "\[Rule]", " ", 
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{"minAirTemperatureMonth", "[", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", 
              RowBox[{"yearNumber", ",", "m"}], "}"}], "]"}], "]"}], 
           "]"}]}]}], "\[IndentingNewLine]", "|>"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "12"}], "}"}]}], "]"}], "|>"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710840515638485`*^9, 3.77108406880336*^9}, {
   3.77108413996288*^9, 3.7710842740694747`*^9}, 3.7710843086465654`*^9, 
   3.771148298544009*^9, {3.771149237394849*^9, 3.7711492449008274`*^9}, {
   3.7712518030285726`*^9, 3.7712518228046513`*^9}, {3.771343525941834*^9, 
   3.7713435817309637`*^9}, {3.771703291719751*^9, 3.771703298038957*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"a331c9fc-939b-4a7d-ae27-e8e76fd66068"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateFileMonth", "[", "yearNumber_Integer", "]"}], " ", ":=", 
  " ", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"IntegerString", "[", "yearNumber", "]"}], ",", " ", 
     "\"\<-month.csv\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716936592693644`*^9, 3.7716936650672235`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"2c0125af-b8ba-43c7-93f2-27ed300ebc69"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportMonthFile", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"generateFileMonth", "[", "yearNumber", "]"}], ",", 
    RowBox[{"monthlyData", "[", "yearNumber", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771703322042691*^9, 3.771703341057353*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"6b324602-0c68-40aa-b79d-f8bc8ae446f1"],

Cell["\<\
Last we calculate the maximum, minimum, and mean value for the entire month. \
\>", "Text",
 CellChangeTimes->{{3.7717004128769426`*^9, 
  3.771700428107072*^9}},ExpressionUUID->"61d55d4d-671a-4d96-bc61-\
ac15c4b7ca4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"monthlyDataSet", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
   RowBox[{"ToExpression", " ", "@", 
    RowBox[{"First", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Import", "[", 
       RowBox[{"generateFileMonth", "[", "yearNumber", "]"}], "]"}], "]"}], 
     "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712616841889677`*^9, 3.7712617149449058`*^9}, {
   3.7713249644152594`*^9, 3.771324972959944*^9}, {3.771326731342314*^9, 
   3.771326758269788*^9}, {3.7713267893746114`*^9, 3.7713268034926825`*^9}, 
   3.771326874804943*^9, {3.771326953724772*^9, 3.771326981293877*^9}, {
   3.771327013332903*^9, 3.7713270199647512`*^9}, {3.771327302673134*^9, 
   3.771327305493167*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"7aa80b8e-c91d-431b-bafe-f1dcd53cb663"],

Cell[BoxData[
 RowBox[{
  RowBox[{"yearMax", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Max", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"monthlyDataSet", "[", "yearNumber", "]"}], "[", 
       RowBox[{"ToString", "[", 
        RowBox[{
         RowBox[{"yearNumber", "*", "100"}], "+", "n"}], "]"}], "]"}], "[", 
      "\"\<Max\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77134401932283*^9, 3.771344058548187*^9}, {
  3.7713453494918127`*^9, 3.7713453504804707`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"ffe7c683-e799-4534-8969-cbb4709ac4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"yearMin", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"Min", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"monthlyDataSet", "[", "yearNumber", "]"}], "[", 
       RowBox[{"ToString", "[", 
        RowBox[{
         RowBox[{"yearNumber", "*", "100"}], "+", "n"}], "]"}], "]"}], "[", 
      "\"\<Min\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77134403678646*^9, 3.771344052971483*^9}, {
  3.7713453557819967`*^9, 3.771345356215287*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"95e4317f-bb7d-4043-9e06-274fbce6fd5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"yearAverage", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"monthlyDataSet", "[", "yearNumber", "]"}], "[", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"yearNumber", "*", "100"}], "+", "n"}], "]"}], "]"}], "[", 
        "\"\<Mean\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "12"}], "}"}]}], "]"}], " ", "*", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"daysInMonth", "[", 
        RowBox[{"DateObject", "[", 
         RowBox[{"{", 
          RowBox[{"yearNumber", ",", "n"}], "}"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "12"}], "}"}]}], "]"}]}], "]"}], "/", 
   RowBox[{"Total", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"daysInMonth", "[", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"yearNumber", ",", "n"}], "}"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7711512828865952`*^9, 3.771151349056099*^9}, {
  3.7711514033456817`*^9, 3.771151438198884*^9}, {3.7711515065823812`*^9, 
  3.771151587093745*^9}, {3.771151704691095*^9, 3.77115174635902*^9}, {
  3.7711531707902036`*^9, 3.7711531728402166`*^9}, {3.7712617380462804`*^9, 
  3.771261802787095*^9}, {3.7713267672179766`*^9, 3.7713267701026692`*^9}, {
  3.771326882985444*^9, 3.771326891063463*^9}, {3.7713270364050646`*^9, 
  3.7713270738428698`*^9}, {3.7713274435438347`*^9, 3.7713274452239337`*^9}, {
  3.771346949621565*^9, 3.7713469598518643`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"60b5001d-351c-47e7-9def-93e4decca76c"],

Cell["\<\
Then we go ahead to generate the year data for the year and export them: \
\>", "Text",
 CellChangeTimes->{{3.771700443242152*^9, 
  3.771700460341529*^9}},ExpressionUUID->"6bb2741f-222f-43a9-a8df-\
7ce96830699c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"yearlyData", "[", "yearNumber_Integer", "]"}], " ", ":=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Max\>\"", " ", "\[Rule]", " ", 
     RowBox[{"yearMax", "[", "yearNumber", "]"}]}], ",", 
    RowBox[{"\"\<Min\>\"", " ", "\[Rule]", " ", 
     RowBox[{"yearMin", "[", "yearNumber", "]"}]}], ",", 
    RowBox[{"\"\<Mean\>\"", " ", "\[Rule]", " ", 
     RowBox[{"yearAverage", "[", "yearNumber", "]"}]}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.771344082758299*^9, 3.7713441525135593`*^9}, {
  3.7717033480630245`*^9, 3.7717033482131076`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"c3caa27f-5045-4da6-a6f3-9585a0d7aaa6"],

Cell["\<\
The following expression will export the daily data for the years 2016, 2017, \
2018. \
\>", "Text",
 CellChangeTimes->{{3.7717007199998074`*^9, 
  3.771700738925403*^9}},ExpressionUUID->"f816854a-36a6-4358-938a-\
5cd98f3d0805"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<all-years.csv\>\"", ",", 
   RowBox[{"<|", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", "n", "]"}], "\[Rule]", " ", 
       RowBox[{"yearlyData", "[", "n", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "2016", ",", "2018"}], "}"}]}], "]"}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7717033521907544`*^9, 3.771703352552997*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"4c5b5161-846a-4410-8e8a-260204974adb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1600, 817},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 320, 5, 96, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],
Cell[903, 29, 402, 6, 34, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[1308, 37, 369, 6, 34, "Text",ExpressionUUID->"b70c649b-a958-4202-9f22-238ea1f9c7d4"],
Cell[1680, 45, 539, 16, 33, "Text",ExpressionUUID->"cd5b32cf-ca2f-44f1-b3d4-db2fecafad81"],
Cell[CellGroupData[{
Cell[2244, 65, 159, 3, 67, "Section",ExpressionUUID->"0a8d13b1-2fdc-4228-af89-732f88f52099"],
Cell[2406, 70, 1592, 25, 200, "Text",ExpressionUUID->"085ed706-12d6-49b3-89ae-0ccfe1987286"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4035, 100, 160, 3, 67, "Section",ExpressionUUID->"b2b17e88-1ea9-499f-b00b-1729ae20ee8d"],
Cell[4198, 105, 312, 7, 34, "Text",ExpressionUUID->"2935245e-80db-461f-b225-75065ef14964"],
Cell[CellGroupData[{
Cell[4535, 116, 207, 4, 53, "Subsection",ExpressionUUID->"3a1fa359-9de6-481f-8c4a-926a69603249"],
Cell[4745, 122, 199, 3, 34, "Text",ExpressionUUID->"cc6c82db-b7e1-4af2-8ac0-c448cf5eb13a"],
Cell[4947, 127, 553, 10, 28, "Input",ExpressionUUID->"d99a72f0-3d6c-4ef9-8ba7-a072ea9c9c8d"],
Cell[5503, 139, 452, 9, 28, "Input",ExpressionUUID->"1db6d682-d53f-4960-82f3-0ee1f11f1791"],
Cell[5958, 150, 350, 7, 28, "Input",ExpressionUUID->"b52e406d-b2c3-49f4-8e60-5a1d09c8a0bb"],
Cell[6311, 159, 282, 6, 28, "Input",ExpressionUUID->"b188c344-d6e8-4825-bd9b-d8c40e96d143"],
Cell[6596, 167, 693, 12, 56, "Text",ExpressionUUID->"f8b779bc-eb18-494e-8acf-306c72b85987"],
Cell[7292, 181, 736, 15, 28, "Input",ExpressionUUID->"684fb160-7e1e-46f2-97f0-af6737f974b1"],
Cell[8031, 198, 605, 13, 28, "Input",ExpressionUUID->"1fb289b4-a6b2-4517-9a1b-52136c6efb23"],
Cell[8639, 213, 419, 8, 34, "Text",ExpressionUUID->"35e63966-b8d8-40ee-aba7-fc349ff48e77"],
Cell[9061, 223, 1104, 26, 28, "Input",ExpressionUUID->"d145da8e-d23b-4679-b129-bb42b455c966"],
Cell[10168, 251, 697, 15, 28, "Input",ExpressionUUID->"57634e95-2805-421f-90a9-2c902a49a192"],
Cell[10868, 268, 260, 4, 28, "Input",ExpressionUUID->"91971021-1359-44f6-8dea-742b356a53a8"],
Cell[11131, 274, 229, 6, 56, "Text",ExpressionUUID->"d63ce7bc-2606-4bd9-ab7f-d9751f0a0522"],
Cell[11363, 282, 2053, 52, 86, "Input",ExpressionUUID->"82b1bc84-fdd1-4fa0-bda6-5f6fd0faecc7"],
Cell[13419, 336, 279, 6, 34, "Text",ExpressionUUID->"266a24ab-fb15-44c0-87ef-155f0231775c"],
Cell[13701, 344, 2643, 66, 86, "Input",ExpressionUUID->"09bfdc6f-003d-4ac9-8055-9fed2a771dca"],
Cell[16347, 412, 2633, 60, 86, "Input",ExpressionUUID->"6fa65467-c853-494a-9b4e-dc574345e016"],
Cell[18983, 474, 2752, 67, 86, "Input",ExpressionUUID->"dea01548-4e25-44b7-b76b-f136b77155dc"],
Cell[21738, 543, 1308, 21, 166, "Text",ExpressionUUID->"d46fe1de-04f8-473b-b2e3-1a217cdcb866"],
Cell[23049, 566, 9641, 221, 295, "Input",ExpressionUUID->"d7be7ffc-6fbe-4cbc-b4fb-33d203b20e3a"],
Cell[32693, 789, 8793, 207, 238, "Input",ExpressionUUID->"b2fb96c7-0593-4daf-9c2a-e9ec9fb3ee21"],
Cell[41489, 998, 156, 3, 34, "Text",ExpressionUUID->"e560ba68-8f3c-4dac-ae24-b49aaceff5e6"],
Cell[41648, 1003, 1280, 34, 67, "Input",ExpressionUUID->"74cbdc6f-c9c5-42df-a6ec-84dcf88705d5"],
Cell[42931, 1039, 1312, 34, 67, "Input",ExpressionUUID->"1b0b7a8c-1f71-43ef-8023-10d9a5297ffd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44280, 1078, 271, 6, 53, "Subsection",ExpressionUUID->"611db898-6314-4d60-9f16-d4d2e11732ac"],
Cell[44554, 1086, 1036, 19, 166, "Text",ExpressionUUID->"5c7a6d62-ea72-45d9-bc26-082e465abf84"],
Cell[45593, 1107, 1558, 26, 48, "Input",ExpressionUUID->"2bcd6cea-27c2-42b7-98c2-8ffb4bcb0794"],
Cell[47154, 1135, 1265, 22, 48, "Input",ExpressionUUID->"9a407b30-9be8-4079-96a7-52cef3a448c7"],
Cell[48422, 1159, 4867, 103, 124, "Input",ExpressionUUID->"f9badfbd-bd4c-4f49-b386-e7b93fd170a6"],
Cell[53292, 1264, 440, 8, 28, "Input",ExpressionUUID->"08a5dbd8-e15c-48a0-ab8d-6b1c14345e55"],
Cell[53735, 1274, 1064, 21, 28, "Input",ExpressionUUID->"951f98f2-b85d-4428-a923-def14bc9495a"],
Cell[54802, 1297, 508, 9, 28, "Input",ExpressionUUID->"db88a211-e2f7-40de-bf28-fc4fb1f75708"],
Cell[55313, 1308, 277, 6, 34, "Text",ExpressionUUID->"fdd13f25-c954-437e-8168-c81877c6f3f3"],
Cell[55593, 1316, 1836, 40, 162, "Input",ExpressionUUID->"08f265cf-f5c7-4c5c-a24d-6b5fdd0031a2"],
Cell[57432, 1358, 274, 6, 34, "Text",ExpressionUUID->"f13aa084-5b9d-4823-867f-417bb7e8c5ab"],
Cell[CellGroupData[{
Cell[57731, 1368, 449, 12, 28, "Input",ExpressionUUID->"de102fbf-30e3-49be-b58f-41bc967fb1b0"],
Cell[58183, 1382, 1066, 20, 52, "Output",ExpressionUUID->"d0e5deb5-bcdf-4dae-b6a5-c290ebd0304c"]
}, Open  ]],
Cell[59264, 1405, 330, 7, 34, "Text",ExpressionUUID->"1df5178f-1e10-444a-bf2f-7d4600df53d3"],
Cell[CellGroupData[{
Cell[59619, 1416, 1008, 22, 28, "Input",ExpressionUUID->"15b58335-6ea9-478e-a89c-de7ade8c3c2e"],
Cell[60630, 1440, 2006, 50, 167, "Output",ExpressionUUID->"d71df7bf-c55f-46c7-82f4-3352968e6321"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[62697, 1497, 204, 3, 67, "Section",ExpressionUUID->"d7303b98-ba36-4f63-85ab-531730593a41"],
Cell[62904, 1502, 463, 9, 56, "Text",ExpressionUUID->"3a71b4b1-5201-4a76-b2c4-00428674e805"],
Cell[CellGroupData[{
Cell[63392, 1515, 580, 14, 28, "Input",ExpressionUUID->"488241c1-6007-4005-9553-e72f8df4a661"],
Cell[63975, 1531, 394, 9, 41, "Output",ExpressionUUID->"fe5e554f-fe8c-4ebe-823d-770f17ea2a6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64406, 1545, 555, 13, 28, "Input",ExpressionUUID->"e18d23f3-f9b3-469f-ab3d-9407ece54f7e"],
Cell[64964, 1560, 392, 9, 41, "Output",ExpressionUUID->"c169ad25-b246-4e92-a84c-c029ca1ee260"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65393, 1574, 680, 15, 28, "Input",ExpressionUUID->"f6923142-daa9-499d-8708-38e850ac2967"],
Cell[66076, 1591, 436, 9, 41, "Output",ExpressionUUID->"5150c551-4f34-4f59-aaa0-1d1b21638494"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[66561, 1606, 244, 4, 67, "Section",ExpressionUUID->"b59ea92b-8835-4102-a815-80a268252d8c"],
Cell[66808, 1612, 547, 10, 56, "Text",ExpressionUUID->"3a28545c-1891-40a2-97be-be999d151268"],
Cell[CellGroupData[{
Cell[67380, 1626, 5759, 122, 68, "Input",ExpressionUUID->"dcdde650-1c4e-46a2-b469-76989c769c01"],
Cell[73142, 1750, 23322, 483, 248, "Output",ExpressionUUID->"30ea5ce9-e066-481d-975d-ee8b1d89578c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[96513, 2239, 274, 6, 67, "Section",ExpressionUUID->"fae7420c-fdc8-4998-abf9-9e0bf16b04ae"],
Cell[96790, 2247, 463, 8, 34, "Text",ExpressionUUID->"9731ea7b-9594-4780-af1e-5f0be6f2ee20"],
Cell[CellGroupData[{
Cell[97278, 2259, 4549, 92, 41, "Input",ExpressionUUID->"ba82907d-7aac-4b20-8cce-c48658a9aa18"],
Cell[101830, 2353, 625, 13, 42, "Output",ExpressionUUID->"ab31ecac-44bc-4a88-b9e4-4b0644b98137"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102492, 2371, 3757, 79, 40, "Input",ExpressionUUID->"c83a0278-1a94-4015-ab2d-74ae77a79f93"],
Cell[106252, 2452, 451, 11, 42, "Output",ExpressionUUID->"eff01b2b-37d9-4956-bc59-8a4b5ec2933b"]
}, Open  ]],
Cell[106718, 2466, 261, 6, 34, "Text",ExpressionUUID->"f7d1e498-9682-4353-bfd5-5c1d15e814fa"],
Cell[CellGroupData[{
Cell[107004, 2476, 3952, 82, 41, "Input",ExpressionUUID->"3ca6b896-fc6a-42da-a347-d6cd83e7cdcb"],
Cell[110959, 2560, 328, 8, 42, "Output",ExpressionUUID->"bca258d5-4c76-44f3-84a4-0f5f7dd294a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111324, 2573, 3647, 76, 40, "Input",ExpressionUUID->"7ce4da33-bb26-472f-8efe-76c91d2f8347"],
Cell[114974, 2651, 327, 8, 42, "Output",ExpressionUUID->"47ad3f88-0fb5-44cf-874a-73fe1771290a"]
}, Open  ]],
Cell[115316, 2662, 330, 7, 34, "Text",ExpressionUUID->"88963b98-c232-4a21-8f58-77df2e0ce952"],
Cell[CellGroupData[{
Cell[115671, 2673, 3436, 72, 40, "Input",ExpressionUUID->"f44f0b50-f002-47da-bb9f-024fff0fd6b7"],
Cell[119110, 2747, 10866, 215, 71, "Output",ExpressionUUID->"ef0b0b90-6821-4d00-a7c1-1e8c6c1ceb4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130013, 2967, 3434, 72, 40, "Input",ExpressionUUID->"6b9e4bad-5b14-4670-baa3-1995792bee31"],
Cell[133450, 3041, 10980, 215, 71, "Output",ExpressionUUID->"f881d740-5cde-4616-9c09-8fdb762b3a36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144467, 3261, 3436, 72, 40, "Input",ExpressionUUID->"4b503e16-d477-4d1b-b3d7-b2acbe0d27a4"],
Cell[147906, 3335, 11270, 219, 71, "Output",ExpressionUUID->"a01f6b49-531a-4ba3-890e-c8976c63cc36"]
}, Open  ]],
Cell[159191, 3557, 1079, 17, 122, "Text",ExpressionUUID->"146fe968-d750-4329-8790-619c08ea4f92"],
Cell[CellGroupData[{
Cell[160295, 3578, 3803, 79, 40, "Input",ExpressionUUID->"eb467b2b-fa0a-46da-986d-86c2c5ad76b1"],
Cell[164101, 3659, 5007, 119, 246, "Output",ExpressionUUID->"c4dfad5d-c173-4961-9099-face3ae94946"]
}, Open  ]],
Cell[169123, 3781, 490, 9, 56, "Text",ExpressionUUID->"eb91bb7b-9381-4ed9-9aa5-da02e09607d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169650, 3795, 325, 6, 67, "Section",ExpressionUUID->"f856abc6-cd04-4c29-865a-4a22c4672054"],
Cell[CellGroupData[{
Cell[170000, 3805, 262, 5, 53, "Subsection",ExpressionUUID->"5ae98f61-a735-421e-b1a3-3d3a80a2174a"],
Cell[170265, 3812, 875, 13, 78, "Text",ExpressionUUID->"c743303a-f00b-4ec4-952c-58ef6fc2be72"],
Cell[171143, 3827, 676, 17, 28, "Input",ExpressionUUID->"ce8d005e-92a5-4e6b-ad88-61e422079192"],
Cell[171822, 3846, 652, 16, 28, "Input",ExpressionUUID->"098cc091-9228-4e92-a5d4-03e0957da599"],
Cell[172477, 3864, 639, 15, 28, "Input",ExpressionUUID->"b71fe719-9a13-448a-b61f-2dd9b9d6fa55"],
Cell[173119, 3881, 820, 18, 28, "Input",ExpressionUUID->"bcf5c157-66a2-4edc-8d78-36c574923671"],
Cell[173942, 3901, 579, 15, 28, "Input",ExpressionUUID->"211bb56a-e8dd-4c64-a4e1-32c07c9081b9"],
Cell[174524, 3918, 403, 8, 56, "Text",ExpressionUUID->"2a3ec139-b87b-4fcb-adaa-35f73863023a"],
Cell[174930, 3928, 422, 9, 28, "Input",ExpressionUUID->"5f87564e-965e-40f5-9f41-1595d7f77b61"],
Cell[175355, 3939, 670, 15, 28, "Input",ExpressionUUID->"d5896f2b-ccdc-4a08-a77e-9e3123ec0ee9"],
Cell[176028, 3956, 666, 15, 28, "Input",ExpressionUUID->"74a2677b-6e5d-4e3c-bedb-d355fcc2c722"],
Cell[176697, 3973, 759, 16, 28, "Input",ExpressionUUID->"625433df-f1b7-423e-9589-5aa4de1f624b"],
Cell[177459, 3991, 611, 14, 28, "Input",ExpressionUUID->"2f7cee33-ca96-49e9-9e9a-172d910589c6"],
Cell[178073, 4007, 426, 8, 34, "Text",ExpressionUUID->"dd684b48-8d8a-4d44-8f82-600dea7f92db"],
Cell[178502, 4017, 586, 12, 28, "Input",ExpressionUUID->"a0538fe9-89a9-44ae-8c4c-292b152d7c86"],
Cell[179091, 4031, 485, 11, 28, "Input",ExpressionUUID->"f49d3ef0-b257-4121-b595-0a7d62e07ec0"],
Cell[179579, 4044, 489, 11, 28, "Input",ExpressionUUID->"6be5ed4c-5bdd-4c73-91b5-8382b271ffdf"],
Cell[180071, 4057, 695, 14, 28, "Input",ExpressionUUID->"7a11c59b-50da-4e0a-9130-fc12796b81d9"],
Cell[180769, 4073, 595, 12, 28, "Input",ExpressionUUID->"edb51f50-69fd-4ab9-9cab-ce3ebf077842"],
Cell[181367, 4087, 597, 13, 28, "Input",ExpressionUUID->"a1eb4489-d996-4c85-9874-877bfc0eb0a8"],
Cell[181967, 4102, 787, 15, 28, "Input",ExpressionUUID->"b5505dbf-69a3-473c-be61-bb5c42a620f6"],
Cell[182757, 4119, 696, 14, 28, "Input",ExpressionUUID->"fc3ed0d1-b9fb-49e9-87a8-3f8f6cfa2b6c"],
Cell[183456, 4135, 693, 14, 28, "Input",ExpressionUUID->"18f25405-9852-44ad-9c70-a0b631976d66"],
Cell[184152, 4151, 643, 13, 28, "Input",ExpressionUUID->"896fe277-2400-4eb4-8b2f-f7d25bb69e66"],
Cell[184798, 4166, 458, 11, 28, "Input",ExpressionUUID->"5f2613c2-bab0-40f9-baad-6489ff2743b9"],
Cell[185259, 4179, 854, 14, 78, "Text",ExpressionUUID->"7813a60b-0765-46b4-9d8d-ef3ff2e26cf8"],
Cell[186116, 4195, 1450, 32, 86, "Input",ExpressionUUID->"73371d58-3f1c-4e19-bac5-cf6ab0146045"],
Cell[187569, 4229, 1403, 31, 86, "Input",ExpressionUUID->"8d134efb-5acc-401f-a40a-b1a589b73569"],
Cell[188975, 4262, 524, 12, 28, "Input",ExpressionUUID->"263ca634-f1af-48fe-88f1-d7c1578b520d"],
Cell[189502, 4276, 638, 16, 28, "Input",ExpressionUUID->"78d186a4-30f5-4e4b-a151-90be634ec3b8"],
Cell[190143, 4294, 3748, 90, 105, "Input",ExpressionUUID->"f8856bdb-611c-4bfa-9830-1917ac400fda"],
Cell[193894, 4386, 276, 6, 34, "Text",ExpressionUUID->"fab1a5cb-127b-4e2b-9398-049842086a7a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194219, 4398, 220, 4, 67, "Section",ExpressionUUID->"97ccdb25-a299-4f54-81f7-2a509f3f625f"],
Cell[194442, 4404, 336, 7, 34, "Text",ExpressionUUID->"dd50a461-6a70-410a-809a-95e07e306cd0"],
Cell[194781, 4413, 386, 7, 34, "Text",ExpressionUUID->"21aaa47f-cbd1-4d24-8c4b-48b92c00ec53"],
Cell[CellGroupData[{
Cell[195192, 4424, 364, 6, 28, "Input",ExpressionUUID->"204a1afa-0142-4ac0-ac58-8d8246c01b68"],
Cell[195559, 4432, 269, 3, 32, "Output",ExpressionUUID->"f6e9c5c7-8660-4d3b-ba02-23f15db7c772"]
}, Open  ]],
Cell[195843, 4438, 331, 7, 34, "Text",ExpressionUUID->"2b7f1f5e-de53-4865-a042-aae6fdb56765"],
Cell[196177, 4447, 614, 10, 56, "Text",ExpressionUUID->"a0380a8e-8c35-49f6-ae4f-8ec3f861840b"],
Cell[196794, 4459, 1063, 29, 48, "Input",ExpressionUUID->"c628c006-ab3b-44ec-bb8e-20ac0e464cbd"],
Cell[197860, 4490, 254, 4, 34, "Text",ExpressionUUID->"54affe59-20b7-4549-b7f8-16ba0573dc99"],
Cell[198117, 4496, 6253, 127, 143, "Input",ExpressionUUID->"14791d4e-1caf-413a-b77b-1cbf9c7a9a7c"],
Cell[204373, 4625, 232, 6, 34, "Text",ExpressionUUID->"703ddca6-7a6f-4cb9-abb4-5684c88c2e20"],
Cell[204608, 4633, 536, 12, 28, "Input",ExpressionUUID->"de9f0c9a-4b44-4487-9b22-dad64675eb02"],
Cell[205147, 4647, 408, 8, 28, "Input",ExpressionUUID->"9b05946a-f7a9-4f8f-a434-06ea9b59efcf"],
Cell[205558, 4657, 445, 9, 34, "Text",ExpressionUUID->"bbc8e817-5690-482d-b19e-a5e77c2b4f97"],
Cell[206006, 4668, 6864, 133, 173, "Input",ExpressionUUID->"2e6917b1-0327-4351-9134-f0c088ba4816"],
Cell[212873, 4803, 218, 5, 34, "Text",ExpressionUUID->"6ac67e10-5d93-4397-af12-64fe1722baa6"],
Cell[213094, 4810, 480, 10, 28, "Input",ExpressionUUID->"d28a2fac-2d15-467e-8014-3c6504510358"],
Cell[213577, 4822, 472, 9, 28, "Input",ExpressionUUID->"1dfffe98-8d3d-43e8-a9b6-61f6e3cf2063"],
Cell[214052, 4833, 418, 8, 34, "Text",ExpressionUUID->"a34b92f6-fe8b-432a-9986-a427630b7229"],
Cell[214473, 4843, 182, 3, 34, "Text",ExpressionUUID->"9d3a0a85-bd9a-4a04-9829-20a072fcfda8"],
Cell[214658, 4848, 894, 16, 28, "Input",ExpressionUUID->"1676d1d4-f148-42fb-b22b-8ac764981629"],
Cell[215555, 4866, 301, 7, 34, "Text",ExpressionUUID->"f3f50086-43cf-4f83-9941-a620a64feac1"],
Cell[215859, 4875, 1710, 41, 105, "Input",ExpressionUUID->"154bd5cc-208e-49bf-acd8-df49f385bd84"],
Cell[217572, 4918, 1722, 41, 105, "Input",ExpressionUUID->"7850aac5-36bb-4369-98e2-42ad976ed9fc"],
Cell[219297, 4961, 2372, 49, 105, "Input",ExpressionUUID->"0db19d17-6792-460b-9860-fff7f3d90259"],
Cell[221672, 5012, 496, 9, 56, "Text",ExpressionUUID->"c4917f9d-5017-4e70-9263-ada6d7690cda"],
Cell[222171, 5023, 725, 17, 28, "Input",ExpressionUUID->"29243afe-e70d-48e9-b5d8-db68f033b486"],
Cell[222899, 5042, 293, 6, 34, "Text",ExpressionUUID->"dff5e182-ddfb-49a6-b12f-ef1d974af4c7"],
Cell[223195, 5050, 3306, 66, 162, "Input",ExpressionUUID->"322d365a-0ceb-4252-833c-d51b1b50073e"],
Cell[226504, 5118, 203, 3, 34, "Text",ExpressionUUID->"6a353123-6a44-42d3-b6da-d3a417cde4ba"],
Cell[226710, 5123, 435, 10, 28, "Input",ExpressionUUID->"1fd000ad-f134-465a-b971-dd984e4a1eb2"],
Cell[227148, 5135, 423, 8, 28, "Input",ExpressionUUID->"a5e56060-c396-4237-9b32-d0717e61a699"],
Cell[227574, 5145, 285, 6, 34, "Text",ExpressionUUID->"fa70d542-6d4d-4948-b987-680b5da0f514"],
Cell[227862, 5153, 591, 12, 28, "Input",ExpressionUUID->"0956f844-1166-438c-ae84-def9c1064bb2"],
Cell[228456, 5167, 2865, 65, 67, "Input",ExpressionUUID->"b763bc3e-2a61-4a64-9348-055bf8113b2a"],
Cell[231324, 5234, 2747, 63, 67, "Input",ExpressionUUID->"61369389-a50a-4a22-9dcd-3f5c87074134"],
Cell[234074, 5299, 3620, 76, 86, "Input",ExpressionUUID->"0cba0ac7-3cad-4ae8-b0e6-89253626c547"],
Cell[237697, 5377, 2161, 47, 124, "Input",ExpressionUUID->"a331c9fc-939b-4a7d-ae27-e8e76fd66068"],
Cell[239861, 5426, 439, 10, 28, "Input",ExpressionUUID->"2c0125af-b8ba-43c7-93f2-27ed300ebc69"],
Cell[240303, 5438, 425, 8, 28, "Input",ExpressionUUID->"6b324602-0c68-40aa-b79d-f8bc8ae446f1"],
Cell[240731, 5448, 229, 5, 34, "Text",ExpressionUUID->"61d55d4d-671a-4d96-bc61-ac15c4b7ca4b"],
Cell[240963, 5455, 824, 16, 28, "Input",ExpressionUUID->"7aa80b8e-c91d-431b-bafe-f1dcd53cb663"],
Cell[241790, 5473, 695, 17, 28, "Input",ExpressionUUID->"ffe7c683-e799-4534-8969-cbb4709ac4a2"],
Cell[242488, 5492, 693, 17, 28, "Input",ExpressionUUID->"95e4317f-bb7d-4043-9e06-274fbce6fd5e"],
Cell[243184, 5511, 1814, 42, 48, "Input",ExpressionUUID->"60b5001d-351c-47e7-9def-93e4decca76c"],
Cell[245001, 5555, 223, 5, 34, "Text",ExpressionUUID->"6bb2741f-222f-43a9-a8df-7ce96830699c"],
Cell[245227, 5562, 669, 13, 28, "Input",ExpressionUUID->"c3caa27f-5045-4da6-a6f3-9585a0d7aaa6"],
Cell[245899, 5577, 238, 6, 34, "Text",ExpressionUUID->"f816854a-36a6-4358-938a-5cd98f3d0805"],
Cell[246140, 5585, 533, 14, 28, "Input",ExpressionUUID->"4c5b5161-846a-4410-8e8a-260204974adb"]
}, Open  ]]
}, Open  ]]
}
]
*)

